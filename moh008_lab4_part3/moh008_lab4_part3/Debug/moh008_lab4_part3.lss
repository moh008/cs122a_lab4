
moh008_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c5c  00000cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063e  00800110  00800110  00000d00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000289f  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebb  00000000  00000000  00003827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017f6  00000000  00000000  000046e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f62  00000000  00000000  0000648c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  000073ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000092e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	aa c2       	rjmp	.+1364   	; 0x58a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e5       	ldi	r30, 0x5C	; 92
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	01 d1       	rcall	.+514    	; 0x2c6 <main>
  c4:	c9 c5       	rjmp	.+2962   	; 0xc58 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	18 d4       	rcall	.+2096   	; 0x900 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	aa d4       	rcall	.+2388   	; 0xa7a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <Led_Init>:
#include "croutine.h"

enum LED_States {LED_Init,next_led, prev_led} led_state;

void Led_Init(){
	led_state = next_led;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
	PORTD = 0x01;
 24c:	8b b9       	out	0x0b, r24	; 11
 24e:	08 95       	ret

00000250 <LED_Tick>:
}

void LED_Tick(){
	//Actions
	switch(led_state){
 250:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	19 f0       	breq	.+6      	; 0x25e <LED_Tick+0xe>
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	29 f0       	breq	.+10     	; 0x266 <LED_Tick+0x16>
 25c:	07 c0       	rjmp	.+14     	; 0x26c <LED_Tick+0x1c>
		
		case next_led:
		PORTD = PORTD << 1;
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	88 0f       	add	r24, r24
 262:	8b b9       	out	0x0b, r24	; 11
		break;
 264:	03 c0       	rjmp	.+6      	; 0x26c <LED_Tick+0x1c>
		
		case prev_led:
		PORTD = PORTD >> 1;
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	86 95       	lsr	r24
 26a:	8b b9       	out	0x0b, r24	; 11
		
		default:
		break;
	}
	//Transitions
	switch(led_state){
 26c:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	19 f0       	breq	.+6      	; 0x27a <LED_Tick+0x2a>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	41 f0       	breq	.+16     	; 0x288 <LED_Tick+0x38>
 278:	08 95       	ret
		case next_led:
		if(PORTD == 0x80)
 27a:	8b b1       	in	r24, 0x0b	; 11
 27c:	80 38       	cpi	r24, 0x80	; 128
 27e:	49 f4       	brne	.+18     	; 0x292 <LED_Tick+0x42>
		led_state = prev_led;
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
 286:	08 95       	ret
		else
		led_state = next_led;
		break;
		
		case prev_led:
		if(PORTD == 0x01)
 288:	8b b1       	in	r24, 0x0b	; 11
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	11 f4       	brne	.+4      	; 0x292 <LED_Tick+0x42>
		led_state = next_led;
 28e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
 292:	08 95       	ret

00000294 <LedSecTask>:
		default:
		break;
	}
}
void LedSecTask() {
	Led_Init();
 294:	d8 df       	rcall	.-80     	; 0x246 <Led_Init>
	
	for(;;)
	{
		LED_Tick();
 296:	dc df       	rcall	.-72     	; 0x250 <LED_Tick>
 298:	84 e6       	ldi	r24, 0x64	; 100
		vTaskDelay(100);
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	67 d4       	rcall	.+2254   	; 0xb6c <vTaskDelay>
 29e:	fb cf       	rjmp	.-10     	; 0x296 <LedSecTask+0x2>

000002a0 <StartSecPulse>:
 2a0:	ef 92       	push	r14
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 2a2:	ff 92       	push	r15
 2a4:	0f 93       	push	r16
	xTaskCreate(LedSecTask,
 2a6:	e1 2c       	mov	r14, r1
 2a8:	f1 2c       	mov	r15, r1
 2aa:	08 2f       	mov	r16, r24
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	45 e5       	ldi	r20, 0x55	; 85
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	71 e0       	ldi	r23, 0x01	; 1
 2b8:	8a e4       	ldi	r24, 0x4A	; 74
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	fc d1       	rcall	.+1016   	; 0x6b6 <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 2be:	0f 91       	pop	r16
 2c0:	ff 90       	pop	r15
 2c2:	ef 90       	pop	r14
 2c4:	08 95       	ret

000002c6 <main>:

int main(void) {
	DDRA = 0x00; PORTA=0xFF;
 2c6:	11 b8       	out	0x01, r1	; 1
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
 2cc:	8a b9       	out	0x0a, r24	; 10
	
	//Start Tasks
	StartSecPulse(1);
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	e7 df       	rcall	.-50     	; 0x2a0 <StartSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 2d2:	ee d2       	rcall	.+1500   	; 0x8b0 <vTaskStartScheduler>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret

000002da <pxPortInitialiseStack>:
 2da:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2dc:	fc 01       	movw	r30, r24
 2de:	30 83       	st	Z, r19
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	22 e2       	ldi	r18, 0x22	; 34
 2e4:	20 83       	st	Z, r18
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	a3 e3       	ldi	r26, 0x33	; 51
 2ea:	a0 83       	st	Z, r26
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	60 83       	st	Z, r22
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	70 83       	st	Z, r23
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	10 82       	st	Z, r1
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	60 e8       	ldi	r22, 0x80	; 128
 2fc:	60 83       	st	Z, r22
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	10 82       	st	Z, r1
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	60 83       	st	Z, r22
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	60 83       	st	Z, r22
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	64 e0       	ldi	r22, 0x04	; 4
 312:	60 83       	st	Z, r22
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	65 e0       	ldi	r22, 0x05	; 5
 318:	60 83       	st	Z, r22
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	66 e0       	ldi	r22, 0x06	; 6
 31e:	60 83       	st	Z, r22
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	60 83       	st	Z, r22
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	68 e0       	ldi	r22, 0x08	; 8
 32a:	60 83       	st	Z, r22
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	69 e0       	ldi	r22, 0x09	; 9
 330:	60 83       	st	Z, r22
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	60 e1       	ldi	r22, 0x10	; 16
 336:	60 83       	st	Z, r22
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	30 83       	st	Z, r19
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	32 e1       	ldi	r19, 0x12	; 18
 340:	30 83       	st	Z, r19
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	33 e1       	ldi	r19, 0x13	; 19
 346:	30 83       	st	Z, r19
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	34 e1       	ldi	r19, 0x14	; 20
 34c:	30 83       	st	Z, r19
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	35 e1       	ldi	r19, 0x15	; 21
 352:	30 83       	st	Z, r19
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	36 e1       	ldi	r19, 0x16	; 22
 358:	30 83       	st	Z, r19
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	37 e1       	ldi	r19, 0x17	; 23
 35e:	30 83       	st	Z, r19
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	38 e1       	ldi	r19, 0x18	; 24
 364:	30 83       	st	Z, r19
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	39 e1       	ldi	r19, 0x19	; 25
 36a:	30 83       	st	Z, r19
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	30 e2       	ldi	r19, 0x20	; 32
 370:	30 83       	st	Z, r19
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	31 e2       	ldi	r19, 0x21	; 33
 376:	30 83       	st	Z, r19
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	20 83       	st	Z, r18
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	23 e2       	ldi	r18, 0x23	; 35
 380:	20 83       	st	Z, r18
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	40 83       	st	Z, r20
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	50 83       	st	Z, r21
 38a:	31 97       	sbiw	r30, 0x01	; 1
 38c:	26 e2       	ldi	r18, 0x26	; 38
 38e:	20 83       	st	Z, r18
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	27 e2       	ldi	r18, 0x27	; 39
 394:	20 83       	st	Z, r18
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	28 e2       	ldi	r18, 0x28	; 40
 39a:	20 83       	st	Z, r18
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	29 e2       	ldi	r18, 0x29	; 41
 3a0:	20 83       	st	Z, r18
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	20 e3       	ldi	r18, 0x30	; 48
 3a6:	20 83       	st	Z, r18
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	21 e3       	ldi	r18, 0x31	; 49
 3ac:	20 83       	st	Z, r18
 3ae:	86 97       	sbiw	r24, 0x26	; 38
 3b0:	08 95       	ret

000003b2 <xPortStartScheduler>:
 3b2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3b6:	8c e7       	ldi	r24, 0x7C	; 124
 3b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3bc:	8b e0       	ldi	r24, 0x0B	; 11
 3be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3c2:	ef e6       	ldi	r30, 0x6F	; 111
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	80 83       	st	Z, r24
 3cc:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3d0:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3d4:	cd 91       	ld	r28, X+
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	dd 91       	ld	r29, X+
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	ff 91       	pop	r31
 3de:	ef 91       	pop	r30
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	af 90       	pop	r10
 408:	9f 90       	pop	r9
 40a:	8f 90       	pop	r8
 40c:	7f 90       	pop	r7
 40e:	6f 90       	pop	r6
 410:	5f 90       	pop	r5
 412:	4f 90       	pop	r4
 414:	3f 90       	pop	r3
 416:	2f 90       	pop	r2
 418:	1f 90       	pop	r1
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	08 95       	ret
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	08 95       	ret

00000426 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	0f 92       	push	r0
 42e:	1f 92       	push	r1
 430:	11 24       	eor	r1, r1
 432:	2f 92       	push	r2
 434:	3f 92       	push	r3
 436:	4f 92       	push	r4
 438:	5f 92       	push	r5
 43a:	6f 92       	push	r6
 43c:	7f 92       	push	r7
 43e:	8f 92       	push	r8
 440:	9f 92       	push	r9
 442:	af 92       	push	r10
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
 46e:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 472:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 476:	0d b6       	in	r0, 0x3d	; 61
 478:	0d 92       	st	X+, r0
 47a:	0e b6       	in	r0, 0x3e	; 62
 47c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 47e:	86 d3       	rcall	.+1804   	; 0xb8c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 480:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 484:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 488:	cd 91       	ld	r28, X+
 48a:	cd bf       	out	0x3d, r28	; 61
 48c:	dd 91       	ld	r29, X+
 48e:	de bf       	out	0x3e, r29	; 62
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	9f 90       	pop	r9
 4be:	8f 90       	pop	r8
 4c0:	7f 90       	pop	r7
 4c2:	6f 90       	pop	r6
 4c4:	5f 90       	pop	r5
 4c6:	4f 90       	pop	r4
 4c8:	3f 90       	pop	r3
 4ca:	2f 90       	pop	r2
 4cc:	1f 90       	pop	r1
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4d4:	08 95       	ret

000004d6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	0f 92       	push	r0
 4de:	1f 92       	push	r1
 4e0:	11 24       	eor	r1, r1
 4e2:	2f 92       	push	r2
 4e4:	3f 92       	push	r3
 4e6:	4f 92       	push	r4
 4e8:	5f 92       	push	r5
 4ea:	6f 92       	push	r6
 4ec:	7f 92       	push	r7
 4ee:	8f 92       	push	r8
 4f0:	9f 92       	push	r9
 4f2:	af 92       	push	r10
 4f4:	bf 92       	push	r11
 4f6:	cf 92       	push	r12
 4f8:	df 92       	push	r13
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	ef 93       	push	r30
 51c:	ff 93       	push	r31
 51e:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 522:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 526:	0d b6       	in	r0, 0x3d	; 61
 528:	0d 92       	st	X+, r0
 52a:	0e b6       	in	r0, 0x3e	; 62
 52c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 52e:	ee d1       	rcall	.+988    	; 0x90c <xTaskIncrementTick>
 530:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 532:	2c d3       	rcall	.+1624   	; 0xb8c <vTaskSwitchContext>
 534:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 538:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 53c:	cd 91       	ld	r28, X+
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	dd 91       	ld	r29, X+
 542:	de bf       	out	0x3e, r29	; 62
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	bf 91       	pop	r27
 54e:	af 91       	pop	r26
 550:	9f 91       	pop	r25
 552:	8f 91       	pop	r24
 554:	7f 91       	pop	r23
 556:	6f 91       	pop	r22
 558:	5f 91       	pop	r21
 55a:	4f 91       	pop	r20
 55c:	3f 91       	pop	r19
 55e:	2f 91       	pop	r18
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	8f 90       	pop	r8
 574:	7f 90       	pop	r7
 576:	6f 90       	pop	r6
 578:	5f 90       	pop	r5
 57a:	4f 90       	pop	r4
 57c:	3f 90       	pop	r3
 57e:	2f 90       	pop	r2
 580:	1f 90       	pop	r1
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	08 95       	ret

0000058a <__vector_13>:

	asm volatile ( "ret" );
 58a:	a5 df       	rcall	.-182    	; 0x4d6 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 58c:	18 95       	reti

0000058e <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 58e:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 592:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 596:	80 81       	ld	r24, Z
 598:	81 11       	cpse	r24, r1
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <prvResetNextTaskUnblockTime+0x1c>
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5a4:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5a8:	08 95       	ret
 5aa:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 5ae:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 5b2:	05 80       	ldd	r0, Z+5	; 0x05
 5b4:	f6 81       	ldd	r31, Z+6	; 0x06
 5b6:	e0 2d       	mov	r30, r0
 5b8:	06 80       	ldd	r0, Z+6	; 0x06
 5ba:	f7 81       	ldd	r31, Z+7	; 0x07
 5bc:	e0 2d       	mov	r30, r0
 5be:	82 81       	ldd	r24, Z+2	; 0x02
 5c0:	93 81       	ldd	r25, Z+3	; 0x03
 5c2:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5c6:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5ca:	08 95       	ret

000005cc <prvIdleTask>:
 5cc:	0f ef       	ldi	r16, 0xFF	; 255
 5ce:	16 e0       	ldi	r17, 0x06	; 6
 5d0:	0f 2e       	mov	r0, r31
 5d2:	f7 e2       	ldi	r31, 0x27	; 39
 5d4:	ef 2e       	mov	r14, r31
 5d6:	f7 e0       	ldi	r31, 0x07	; 7
 5d8:	ff 2e       	mov	r15, r31
 5da:	f0 2d       	mov	r31, r0
 5dc:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5e0:	88 23       	and	r24, r24
 5e2:	11 f1       	breq	.+68     	; 0x628 <prvIdleTask+0x5c>
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	0f 92       	push	r0
 5ea:	d8 01       	movw	r26, r16
 5ec:	15 96       	adiw	r26, 0x05	; 5
 5ee:	ed 91       	ld	r30, X+
 5f0:	fc 91       	ld	r31, X
 5f2:	16 97       	sbiw	r26, 0x06	; 6
 5f4:	c6 81       	ldd	r28, Z+6	; 0x06
 5f6:	d7 81       	ldd	r29, Z+7	; 0x07
 5f8:	ce 01       	movw	r24, r28
 5fa:	02 96       	adiw	r24, 0x02	; 2
 5fc:	fd dd       	rcall	.-1030   	; 0x1f8 <uxListRemove>
 5fe:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 602:	81 50       	subi	r24, 0x01	; 1
 604:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 608:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 60c:	81 50       	subi	r24, 0x01	; 1
 60e:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	8f 89       	ldd	r24, Y+23	; 0x17
 618:	98 8d       	ldd	r25, Y+24	; 0x18
 61a:	89 dd       	rcall	.-1262   	; 0x12e <vPortFree>
 61c:	ce 01       	movw	r24, r28
 61e:	87 dd       	rcall	.-1266   	; 0x12e <vPortFree>
 620:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 624:	81 11       	cpse	r24, r1
 626:	de cf       	rjmp	.-68     	; 0x5e4 <prvIdleTask+0x18>
 628:	f7 01       	movw	r30, r14
 62a:	80 81       	ld	r24, Z
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	b0 f2       	brcs	.-84     	; 0x5dc <prvIdleTask+0x10>
 630:	fa de       	rcall	.-524    	; 0x426 <vPortYield>
 632:	d4 cf       	rjmp	.-88     	; 0x5dc <prvIdleTask+0x10>

00000634 <prvAddCurrentTaskToDelayedList>:
 634:	0f 93       	push	r16
 636:	1f 93       	push	r17
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	ec 01       	movw	r28, r24
 63e:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 642:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 646:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 64a:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 64e:	02 96       	adiw	r24, 0x02	; 2
 650:	d3 dd       	rcall	.-1114   	; 0x1f8 <uxListRemove>
 652:	c0 0f       	add	r28, r16
 654:	d1 1f       	adc	r29, r17
 656:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 65a:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 65e:	d3 83       	std	Z+3, r29	; 0x03
 660:	c2 83       	std	Z+2, r28	; 0x02
 662:	c0 17       	cp	r28, r16
 664:	d1 07       	cpc	r29, r17
 666:	60 f4       	brcc	.+24     	; 0x680 <prvAddCurrentTaskToDelayedList+0x4c>
 668:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 66c:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 670:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 674:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 678:	6e 5f       	subi	r22, 0xFE	; 254
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	8c dd       	rcall	.-1256   	; 0x196 <vListInsert>
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <prvAddCurrentTaskToDelayedList+0x78>
 680:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 684:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 688:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 68c:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 690:	6e 5f       	subi	r22, 0xFE	; 254
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	80 dd       	rcall	.-1280   	; 0x196 <vListInsert>
 696:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 69a:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 69e:	c8 17       	cp	r28, r24
 6a0:	d9 07       	cpc	r29, r25
 6a2:	20 f4       	brcc	.+8      	; 0x6ac <prvAddCurrentTaskToDelayedList+0x78>
 6a4:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 6a8:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	08 95       	ret

000006b6 <xTaskCreate>:
 6b6:	4f 92       	push	r4
 6b8:	5f 92       	push	r5
 6ba:	6f 92       	push	r6
 6bc:	7f 92       	push	r7
 6be:	8f 92       	push	r8
 6c0:	9f 92       	push	r9
 6c2:	af 92       	push	r10
 6c4:	bf 92       	push	r11
 6c6:	cf 92       	push	r12
 6c8:	df 92       	push	r13
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	4c 01       	movw	r8, r24
 6d6:	6b 01       	movw	r12, r22
 6d8:	5a 01       	movw	r10, r20
 6da:	29 01       	movw	r4, r18
 6dc:	ca 01       	movw	r24, r20
 6de:	f4 dc       	rcall	.-1560   	; 0xc8 <pvPortMalloc>
 6e0:	3c 01       	movw	r6, r24
 6e2:	89 2b       	or	r24, r25
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <xTaskCreate+0x32>
 6e6:	d3 c0       	rjmp	.+422    	; 0x88e <xTaskCreate+0x1d8>
 6e8:	86 e2       	ldi	r24, 0x26	; 38
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	ed dc       	rcall	.-1574   	; 0xc8 <pvPortMalloc>
 6ee:	ec 01       	movw	r28, r24
 6f0:	89 2b       	or	r24, r25
 6f2:	59 f0       	breq	.+22     	; 0x70a <xTaskCreate+0x54>
 6f4:	78 8e       	std	Y+24, r7	; 0x18
 6f6:	6f 8a       	std	Y+23, r6	; 0x17
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	a8 1a       	sub	r10, r24
 6fc:	b1 08       	sbc	r11, r1
 6fe:	a6 0c       	add	r10, r6
 700:	b7 1c       	adc	r11, r7
 702:	c1 14       	cp	r12, r1
 704:	d1 04       	cpc	r13, r1
 706:	21 f4       	brne	.+8      	; 0x710 <xTaskCreate+0x5a>
 708:	1f c0       	rjmp	.+62     	; 0x748 <xTaskCreate+0x92>
 70a:	c3 01       	movw	r24, r6
 70c:	10 dd       	rcall	.-1504   	; 0x12e <vPortFree>
 70e:	bf c0       	rjmp	.+382    	; 0x88e <xTaskCreate+0x1d8>
 710:	d6 01       	movw	r26, r12
 712:	8c 91       	ld	r24, X
 714:	89 8f       	std	Y+25, r24	; 0x19
 716:	8c 91       	ld	r24, X
 718:	88 23       	and	r24, r24
 71a:	a1 f0       	breq	.+40     	; 0x744 <xTaskCreate+0x8e>
 71c:	ae 01       	movw	r20, r28
 71e:	46 5e       	subi	r20, 0xE6	; 230
 720:	5f 4f       	sbci	r21, 0xFF	; 255
 722:	f6 01       	movw	r30, r12
 724:	31 96       	adiw	r30, 0x01	; 1
 726:	b8 e0       	ldi	r27, 0x08	; 8
 728:	cb 0e       	add	r12, r27
 72a:	d1 1c       	adc	r13, r1
 72c:	cf 01       	movw	r24, r30
 72e:	21 91       	ld	r18, Z+
 730:	da 01       	movw	r26, r20
 732:	2d 93       	st	X+, r18
 734:	ad 01       	movw	r20, r26
 736:	dc 01       	movw	r26, r24
 738:	8c 91       	ld	r24, X
 73a:	88 23       	and	r24, r24
 73c:	19 f0       	breq	.+6      	; 0x744 <xTaskCreate+0x8e>
 73e:	ec 15       	cp	r30, r12
 740:	fd 05       	cpc	r31, r13
 742:	a1 f7       	brne	.-24     	; 0x72c <xTaskCreate+0x76>
 744:	18 a2       	std	Y+32, r1	; 0x20
 746:	01 c0       	rjmp	.+2      	; 0x74a <xTaskCreate+0x94>
 748:	19 8e       	std	Y+25, r1	; 0x19
 74a:	04 30       	cpi	r16, 0x04	; 4
 74c:	08 f0       	brcs	.+2      	; 0x750 <xTaskCreate+0x9a>
 74e:	03 e0       	ldi	r16, 0x03	; 3
 750:	0e 8b       	std	Y+22, r16	; 0x16
 752:	6e 01       	movw	r12, r28
 754:	b2 e0       	ldi	r27, 0x02	; 2
 756:	cb 0e       	add	r12, r27
 758:	d1 1c       	adc	r13, r1
 75a:	c6 01       	movw	r24, r12
 75c:	f7 dc       	rcall	.-1554   	; 0x14c <vListInitialiseItem>
 75e:	ce 01       	movw	r24, r28
 760:	0c 96       	adiw	r24, 0x0c	; 12
 762:	f4 dc       	rcall	.-1560   	; 0x14c <vListInitialiseItem>
 764:	d9 87       	std	Y+9, r29	; 0x09
 766:	c8 87       	std	Y+8, r28	; 0x08
 768:	84 e0       	ldi	r24, 0x04	; 4
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	80 1b       	sub	r24, r16
 76e:	91 09       	sbc	r25, r1
 770:	9d 87       	std	Y+13, r25	; 0x0d
 772:	8c 87       	std	Y+12, r24	; 0x0c
 774:	db 8b       	std	Y+19, r29	; 0x13
 776:	ca 8b       	std	Y+18, r28	; 0x12
 778:	19 a2       	std	Y+33, r1	; 0x21
 77a:	1a a2       	std	Y+34, r1	; 0x22
 77c:	1b a2       	std	Y+35, r1	; 0x23
 77e:	1c a2       	std	Y+36, r1	; 0x24
 780:	1d a2       	std	Y+37, r1	; 0x25
 782:	a2 01       	movw	r20, r4
 784:	b4 01       	movw	r22, r8
 786:	c5 01       	movw	r24, r10
 788:	a8 dd       	rcall	.-1200   	; 0x2da <pxPortInitialiseStack>
 78a:	99 83       	std	Y+1, r25	; 0x01
 78c:	88 83       	st	Y, r24
 78e:	e1 14       	cp	r14, r1
 790:	f1 04       	cpc	r15, r1
 792:	19 f0       	breq	.+6      	; 0x79a <xTaskCreate+0xe4>
 794:	f7 01       	movw	r30, r14
 796:	d1 83       	std	Z+1, r29	; 0x01
 798:	c0 83       	st	Z, r28
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	f8 94       	cli
 79e:	0f 92       	push	r0
 7a0:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7a4:	8f 5f       	subi	r24, 0xFF	; 255
 7a6:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 7aa:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 7ae:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 7b2:	89 2b       	or	r24, r25
 7b4:	69 f5       	brne	.+90     	; 0x810 <xTaskCreate+0x15a>
 7b6:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 7ba:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7be:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7c2:	81 30       	cpi	r24, 0x01	; 1
 7c4:	a9 f5       	brne	.+106    	; 0x830 <xTaskCreate+0x17a>
 7c6:	87 e2       	ldi	r24, 0x27	; 39
 7c8:	97 e0       	ldi	r25, 0x07	; 7
 7ca:	b2 dc       	rcall	.-1692   	; 0x130 <vListInitialise>
 7cc:	80 e3       	ldi	r24, 0x30	; 48
 7ce:	97 e0       	ldi	r25, 0x07	; 7
 7d0:	af dc       	rcall	.-1698   	; 0x130 <vListInitialise>
 7d2:	89 e3       	ldi	r24, 0x39	; 57
 7d4:	97 e0       	ldi	r25, 0x07	; 7
 7d6:	ac dc       	rcall	.-1704   	; 0x130 <vListInitialise>
 7d8:	82 e4       	ldi	r24, 0x42	; 66
 7da:	97 e0       	ldi	r25, 0x07	; 7
 7dc:	a9 dc       	rcall	.-1710   	; 0x130 <vListInitialise>
 7de:	8e e1       	ldi	r24, 0x1E	; 30
 7e0:	97 e0       	ldi	r25, 0x07	; 7
 7e2:	a6 dc       	rcall	.-1716   	; 0x130 <vListInitialise>
 7e4:	85 e1       	ldi	r24, 0x15	; 21
 7e6:	97 e0       	ldi	r25, 0x07	; 7
 7e8:	a3 dc       	rcall	.-1722   	; 0x130 <vListInitialise>
 7ea:	88 e0       	ldi	r24, 0x08	; 8
 7ec:	97 e0       	ldi	r25, 0x07	; 7
 7ee:	a0 dc       	rcall	.-1728   	; 0x130 <vListInitialise>
 7f0:	8f ef       	ldi	r24, 0xFF	; 255
 7f2:	96 e0       	ldi	r25, 0x06	; 6
 7f4:	9d dc       	rcall	.-1734   	; 0x130 <vListInitialise>
 7f6:	8e e1       	ldi	r24, 0x1E	; 30
 7f8:	97 e0       	ldi	r25, 0x07	; 7
 7fa:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 7fe:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 802:	85 e1       	ldi	r24, 0x15	; 21
 804:	97 e0       	ldi	r25, 0x07	; 7
 806:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 80a:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 80e:	10 c0       	rjmp	.+32     	; 0x830 <xTaskCreate+0x17a>
 810:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 814:	81 11       	cpse	r24, r1
 816:	0c c0       	rjmp	.+24     	; 0x830 <xTaskCreate+0x17a>
 818:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 81c:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 820:	96 89       	ldd	r25, Z+22	; 0x16
 822:	8e 89       	ldd	r24, Y+22	; 0x16
 824:	89 17       	cp	r24, r25
 826:	20 f0       	brcs	.+8      	; 0x830 <xTaskCreate+0x17a>
 828:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 82c:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 830:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 834:	8f 5f       	subi	r24, 0xFF	; 255
 836:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 83a:	8e 89       	ldd	r24, Y+22	; 0x16
 83c:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 840:	98 17       	cp	r25, r24
 842:	10 f4       	brcc	.+4      	; 0x848 <xTaskCreate+0x192>
 844:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	9c 01       	movw	r18, r24
 84c:	22 0f       	add	r18, r18
 84e:	33 1f       	adc	r19, r19
 850:	22 0f       	add	r18, r18
 852:	33 1f       	adc	r19, r19
 854:	22 0f       	add	r18, r18
 856:	33 1f       	adc	r19, r19
 858:	82 0f       	add	r24, r18
 85a:	93 1f       	adc	r25, r19
 85c:	b6 01       	movw	r22, r12
 85e:	89 5d       	subi	r24, 0xD9	; 217
 860:	98 4f       	sbci	r25, 0xF8	; 248
 862:	78 dc       	rcall	.-1808   	; 0x154 <vListInsertEnd>
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 86c:	88 23       	and	r24, r24
 86e:	59 f0       	breq	.+22     	; 0x886 <xTaskCreate+0x1d0>
 870:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 874:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 878:	96 89       	ldd	r25, Z+22	; 0x16
 87a:	8e 89       	ldd	r24, Y+22	; 0x16
 87c:	98 17       	cp	r25, r24
 87e:	28 f4       	brcc	.+10     	; 0x88a <xTaskCreate+0x1d4>
 880:	d2 dd       	rcall	.-1116   	; 0x426 <vPortYield>
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	05 c0       	rjmp	.+10     	; 0x890 <xTaskCreate+0x1da>
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	03 c0       	rjmp	.+6      	; 0x890 <xTaskCreate+0x1da>
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	01 c0       	rjmp	.+2      	; 0x890 <xTaskCreate+0x1da>
 88e:	8f ef       	ldi	r24, 0xFF	; 255
 890:	df 91       	pop	r29
 892:	cf 91       	pop	r28
 894:	0f 91       	pop	r16
 896:	ff 90       	pop	r15
 898:	ef 90       	pop	r14
 89a:	df 90       	pop	r13
 89c:	cf 90       	pop	r12
 89e:	bf 90       	pop	r11
 8a0:	af 90       	pop	r10
 8a2:	9f 90       	pop	r9
 8a4:	8f 90       	pop	r8
 8a6:	7f 90       	pop	r7
 8a8:	6f 90       	pop	r6
 8aa:	5f 90       	pop	r5
 8ac:	4f 90       	pop	r4
 8ae:	08 95       	ret

000008b0 <vTaskStartScheduler>:
 8b0:	ef 92       	push	r14
 8b2:	ff 92       	push	r15
 8b4:	0f 93       	push	r16
 8b6:	0f 2e       	mov	r0, r31
 8b8:	f1 ef       	ldi	r31, 0xF1	; 241
 8ba:	ef 2e       	mov	r14, r31
 8bc:	f6 e0       	ldi	r31, 0x06	; 6
 8be:	ff 2e       	mov	r15, r31
 8c0:	f0 2d       	mov	r31, r0
 8c2:	00 e0       	ldi	r16, 0x00	; 0
 8c4:	20 e0       	ldi	r18, 0x00	; 0
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	45 e5       	ldi	r20, 0x55	; 85
 8ca:	50 e0       	ldi	r21, 0x00	; 0
 8cc:	6b e0       	ldi	r22, 0x0B	; 11
 8ce:	71 e0       	ldi	r23, 0x01	; 1
 8d0:	86 ee       	ldi	r24, 0xE6	; 230
 8d2:	92 e0       	ldi	r25, 0x02	; 2
 8d4:	f0 de       	rcall	.-544    	; 0x6b6 <xTaskCreate>
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	79 f4       	brne	.+30     	; 0x8f8 <vTaskStartScheduler+0x48>
 8da:	f8 94       	cli
 8dc:	8f ef       	ldi	r24, 0xFF	; 255
 8de:	9f ef       	ldi	r25, 0xFF	; 255
 8e0:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 8e4:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 8ee:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 8f2:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 8f6:	5d dd       	rcall	.-1350   	; 0x3b2 <xPortStartScheduler>
 8f8:	0f 91       	pop	r16
 8fa:	ff 90       	pop	r15
 8fc:	ef 90       	pop	r14
 8fe:	08 95       	ret

00000900 <vTaskSuspendAll>:
 900:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 904:	8f 5f       	subi	r24, 0xFF	; 255
 906:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 90a:	08 95       	ret

0000090c <xTaskIncrementTick>:
 90c:	cf 92       	push	r12
 90e:	df 92       	push	r13
 910:	ef 92       	push	r14
 912:	ff 92       	push	r15
 914:	0f 93       	push	r16
 916:	1f 93       	push	r17
 918:	cf 93       	push	r28
 91a:	df 93       	push	r29
 91c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 920:	81 11       	cpse	r24, r1
 922:	95 c0       	rjmp	.+298    	; 0xa4e <xTaskIncrementTick+0x142>
 924:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 928:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	e8 1a       	sub	r14, r24
 930:	f8 0a       	sbc	r15, r24
 932:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 936:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 93a:	e1 14       	cp	r14, r1
 93c:	f1 04       	cpc	r15, r1
 93e:	b1 f4       	brne	.+44     	; 0x96c <xTaskIncrementTick+0x60>
 940:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 944:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 948:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 94c:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 950:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 954:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 958:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 95c:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 960:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 964:	8f 5f       	subi	r24, 0xFF	; 255
 966:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 96a:	11 de       	rcall	.-990    	; 0x58e <prvResetNextTaskUnblockTime>
 96c:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 970:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 974:	e8 16       	cp	r14, r24
 976:	f9 06       	cpc	r15, r25
 978:	10 f4       	brcc	.+4      	; 0x97e <xTaskIncrementTick+0x72>
 97a:	d1 2c       	mov	r13, r1
 97c:	50 c0       	rjmp	.+160    	; 0xa1e <xTaskIncrementTick+0x112>
 97e:	d1 2c       	mov	r13, r1
 980:	cc 24       	eor	r12, r12
 982:	c3 94       	inc	r12
 984:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 988:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 98c:	80 81       	ld	r24, Z
 98e:	81 11       	cpse	r24, r1
 990:	07 c0       	rjmp	.+14     	; 0x9a0 <xTaskIncrementTick+0x94>
 992:	8f ef       	ldi	r24, 0xFF	; 255
 994:	9f ef       	ldi	r25, 0xFF	; 255
 996:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 99a:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 99e:	3f c0       	rjmp	.+126    	; 0xa1e <xTaskIncrementTick+0x112>
 9a0:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 9a4:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 9a8:	05 80       	ldd	r0, Z+5	; 0x05
 9aa:	f6 81       	ldd	r31, Z+6	; 0x06
 9ac:	e0 2d       	mov	r30, r0
 9ae:	c6 81       	ldd	r28, Z+6	; 0x06
 9b0:	d7 81       	ldd	r29, Z+7	; 0x07
 9b2:	8a 81       	ldd	r24, Y+2	; 0x02
 9b4:	9b 81       	ldd	r25, Y+3	; 0x03
 9b6:	e8 16       	cp	r14, r24
 9b8:	f9 06       	cpc	r15, r25
 9ba:	28 f4       	brcc	.+10     	; 0x9c6 <xTaskIncrementTick+0xba>
 9bc:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9c0:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9c4:	2c c0       	rjmp	.+88     	; 0xa1e <xTaskIncrementTick+0x112>
 9c6:	8e 01       	movw	r16, r28
 9c8:	0e 5f       	subi	r16, 0xFE	; 254
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	c8 01       	movw	r24, r16
 9ce:	14 dc       	rcall	.-2008   	; 0x1f8 <uxListRemove>
 9d0:	8c 89       	ldd	r24, Y+20	; 0x14
 9d2:	9d 89       	ldd	r25, Y+21	; 0x15
 9d4:	89 2b       	or	r24, r25
 9d6:	19 f0       	breq	.+6      	; 0x9de <xTaskIncrementTick+0xd2>
 9d8:	ce 01       	movw	r24, r28
 9da:	0c 96       	adiw	r24, 0x0c	; 12
 9dc:	0d dc       	rcall	.-2022   	; 0x1f8 <uxListRemove>
 9de:	8e 89       	ldd	r24, Y+22	; 0x16
 9e0:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 9e4:	98 17       	cp	r25, r24
 9e6:	10 f4       	brcc	.+4      	; 0x9ec <xTaskIncrementTick+0xe0>
 9e8:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	9c 01       	movw	r18, r24
 9f0:	22 0f       	add	r18, r18
 9f2:	33 1f       	adc	r19, r19
 9f4:	22 0f       	add	r18, r18
 9f6:	33 1f       	adc	r19, r19
 9f8:	22 0f       	add	r18, r18
 9fa:	33 1f       	adc	r19, r19
 9fc:	82 0f       	add	r24, r18
 9fe:	93 1f       	adc	r25, r19
 a00:	b8 01       	movw	r22, r16
 a02:	89 5d       	subi	r24, 0xD9	; 217
 a04:	98 4f       	sbci	r25, 0xF8	; 248
 a06:	a6 db       	rcall	.-2228   	; 0x154 <vListInsertEnd>
 a08:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a0c:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a10:	9e 89       	ldd	r25, Y+22	; 0x16
 a12:	86 89       	ldd	r24, Z+22	; 0x16
 a14:	98 17       	cp	r25, r24
 a16:	08 f4       	brcc	.+2      	; 0xa1a <xTaskIncrementTick+0x10e>
 a18:	b5 cf       	rjmp	.-150    	; 0x984 <xTaskIncrementTick+0x78>
 a1a:	dc 2c       	mov	r13, r12
 a1c:	b3 cf       	rjmp	.-154    	; 0x984 <xTaskIncrementTick+0x78>
 a1e:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a22:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a26:	86 89       	ldd	r24, Z+22	; 0x16
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	fc 01       	movw	r30, r24
 a2c:	ee 0f       	add	r30, r30
 a2e:	ff 1f       	adc	r31, r31
 a30:	ee 0f       	add	r30, r30
 a32:	ff 1f       	adc	r31, r31
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	8e 0f       	add	r24, r30
 a3a:	9f 1f       	adc	r25, r31
 a3c:	fc 01       	movw	r30, r24
 a3e:	e9 5d       	subi	r30, 0xD9	; 217
 a40:	f8 4f       	sbci	r31, 0xF8	; 248
 a42:	80 81       	ld	r24, Z
 a44:	82 30       	cpi	r24, 0x02	; 2
 a46:	48 f0       	brcs	.+18     	; 0xa5a <xTaskIncrementTick+0x14e>
 a48:	dd 24       	eor	r13, r13
 a4a:	d3 94       	inc	r13
 a4c:	06 c0       	rjmp	.+12     	; 0xa5a <xTaskIncrementTick+0x14e>
 a4e:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a52:	8f 5f       	subi	r24, 0xFF	; 255
 a54:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a58:	d1 2c       	mov	r13, r1
 a5a:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a5e:	88 23       	and	r24, r24
 a60:	11 f0       	breq	.+4      	; 0xa66 <xTaskIncrementTick+0x15a>
 a62:	dd 24       	eor	r13, r13
 a64:	d3 94       	inc	r13
 a66:	8d 2d       	mov	r24, r13
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	0f 91       	pop	r16
 a70:	ff 90       	pop	r15
 a72:	ef 90       	pop	r14
 a74:	df 90       	pop	r13
 a76:	cf 90       	pop	r12
 a78:	08 95       	ret

00000a7a <xTaskResumeAll>:
 a7a:	df 92       	push	r13
 a7c:	ef 92       	push	r14
 a7e:	ff 92       	push	r15
 a80:	0f 93       	push	r16
 a82:	1f 93       	push	r17
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	0f b6       	in	r0, 0x3f	; 63
 a8a:	f8 94       	cli
 a8c:	0f 92       	push	r0
 a8e:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a92:	81 50       	subi	r24, 0x01	; 1
 a94:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 a98:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a9c:	81 11       	cpse	r24, r1
 a9e:	59 c0       	rjmp	.+178    	; 0xb52 <xTaskResumeAll+0xd8>
 aa0:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 aa4:	81 11       	cpse	r24, r1
 aa6:	30 c0       	rjmp	.+96     	; 0xb08 <xTaskResumeAll+0x8e>
 aa8:	57 c0       	rjmp	.+174    	; 0xb58 <xTaskResumeAll+0xde>
 aaa:	d7 01       	movw	r26, r14
 aac:	15 96       	adiw	r26, 0x05	; 5
 aae:	ed 91       	ld	r30, X+
 ab0:	fc 91       	ld	r31, X
 ab2:	16 97       	sbiw	r26, 0x06	; 6
 ab4:	c6 81       	ldd	r28, Z+6	; 0x06
 ab6:	d7 81       	ldd	r29, Z+7	; 0x07
 ab8:	ce 01       	movw	r24, r28
 aba:	0c 96       	adiw	r24, 0x0c	; 12
 abc:	9d db       	rcall	.-2246   	; 0x1f8 <uxListRemove>
 abe:	8e 01       	movw	r16, r28
 ac0:	0e 5f       	subi	r16, 0xFE	; 254
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	c8 01       	movw	r24, r16
 ac6:	98 db       	rcall	.-2256   	; 0x1f8 <uxListRemove>
 ac8:	8e 89       	ldd	r24, Y+22	; 0x16
 aca:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ace:	98 17       	cp	r25, r24
 ad0:	10 f4       	brcc	.+4      	; 0xad6 <xTaskResumeAll+0x5c>
 ad2:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	9c 01       	movw	r18, r24
 ada:	22 0f       	add	r18, r18
 adc:	33 1f       	adc	r19, r19
 ade:	22 0f       	add	r18, r18
 ae0:	33 1f       	adc	r19, r19
 ae2:	22 0f       	add	r18, r18
 ae4:	33 1f       	adc	r19, r19
 ae6:	82 0f       	add	r24, r18
 ae8:	93 1f       	adc	r25, r19
 aea:	b8 01       	movw	r22, r16
 aec:	89 5d       	subi	r24, 0xD9	; 217
 aee:	98 4f       	sbci	r25, 0xF8	; 248
 af0:	31 db       	rcall	.-2462   	; 0x154 <vListInsertEnd>
 af2:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 af6:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 afa:	9e 89       	ldd	r25, Y+22	; 0x16
 afc:	86 89       	ldd	r24, Z+22	; 0x16
 afe:	98 17       	cp	r25, r24
 b00:	68 f0       	brcs	.+26     	; 0xb1c <xTaskResumeAll+0xa2>
 b02:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 b06:	0a c0       	rjmp	.+20     	; 0xb1c <xTaskResumeAll+0xa2>
 b08:	c0 e0       	ldi	r28, 0x00	; 0
 b0a:	d0 e0       	ldi	r29, 0x00	; 0
 b0c:	0f 2e       	mov	r0, r31
 b0e:	f8 e0       	ldi	r31, 0x08	; 8
 b10:	ef 2e       	mov	r14, r31
 b12:	f7 e0       	ldi	r31, 0x07	; 7
 b14:	ff 2e       	mov	r15, r31
 b16:	f0 2d       	mov	r31, r0
 b18:	dd 24       	eor	r13, r13
 b1a:	d3 94       	inc	r13
 b1c:	f7 01       	movw	r30, r14
 b1e:	80 81       	ld	r24, Z
 b20:	81 11       	cpse	r24, r1
 b22:	c3 cf       	rjmp	.-122    	; 0xaaa <xTaskResumeAll+0x30>
 b24:	cd 2b       	or	r28, r29
 b26:	09 f0       	breq	.+2      	; 0xb2a <xTaskResumeAll+0xb0>
 b28:	32 dd       	rcall	.-1436   	; 0x58e <prvResetNextTaskUnblockTime>
 b2a:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b2e:	cc 23       	and	r28, r28
 b30:	49 f0       	breq	.+18     	; 0xb44 <xTaskResumeAll+0xca>
 b32:	d1 e0       	ldi	r29, 0x01	; 1
 b34:	eb de       	rcall	.-554    	; 0x90c <xTaskIncrementTick>
 b36:	81 11       	cpse	r24, r1
 b38:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b3c:	c1 50       	subi	r28, 0x01	; 1
 b3e:	d1 f7       	brne	.-12     	; 0xb34 <xTaskResumeAll+0xba>
 b40:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b44:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b48:	88 23       	and	r24, r24
 b4a:	29 f0       	breq	.+10     	; 0xb56 <xTaskResumeAll+0xdc>
 b4c:	6c dc       	rcall	.-1832   	; 0x426 <vPortYield>
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	03 c0       	rjmp	.+6      	; 0xb58 <xTaskResumeAll+0xde>
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	01 c0       	rjmp	.+2      	; 0xb58 <xTaskResumeAll+0xde>
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	0f 90       	pop	r0
 b5a:	0f be       	out	0x3f, r0	; 63
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	1f 91       	pop	r17
 b62:	0f 91       	pop	r16
 b64:	ff 90       	pop	r15
 b66:	ef 90       	pop	r14
 b68:	df 90       	pop	r13
 b6a:	08 95       	ret

00000b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b6c:	cf 93       	push	r28
 b6e:	df 93       	push	r29
 b70:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b72:	89 2b       	or	r24, r25
 b74:	39 f0       	breq	.+14     	; 0xb84 <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b76:	c4 de       	rcall	.-632    	; 0x900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b78:	60 e0       	ldi	r22, 0x00	; 0
 b7a:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 b7c:	5b dd       	rcall	.-1354   	; 0x634 <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b7e:	7d df       	rcall	.-262    	; 0xa7a <xTaskResumeAll>
 b80:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 b82:	01 c0       	rjmp	.+2      	; 0xb86 <vTaskDelay+0x1a>
 b84:	50 dc       	rcall	.-1888   	; 0x426 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b8c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 b90:	88 23       	and	r24, r24
 b92:	21 f0       	breq	.+8      	; 0xb9c <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 b9a:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 b9c:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 ba0:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ba4:	82 2f       	mov	r24, r18
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	fc 01       	movw	r30, r24
 baa:	ee 0f       	add	r30, r30
 bac:	ff 1f       	adc	r31, r31
 bae:	ee 0f       	add	r30, r30
 bb0:	ff 1f       	adc	r31, r31
 bb2:	ee 0f       	add	r30, r30
 bb4:	ff 1f       	adc	r31, r31
 bb6:	e8 0f       	add	r30, r24
 bb8:	f9 1f       	adc	r31, r25
 bba:	e9 5d       	subi	r30, 0xD9	; 217
 bbc:	f8 4f       	sbci	r31, 0xF8	; 248
 bbe:	30 81       	ld	r19, Z
 bc0:	31 11       	cpse	r19, r1
 bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <vTaskSwitchContext+0x5a>
 bc4:	21 50       	subi	r18, 0x01	; 1
 bc6:	82 2f       	mov	r24, r18
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	fc 01       	movw	r30, r24
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	ee 0f       	add	r30, r30
 bd2:	ff 1f       	adc	r31, r31
 bd4:	ee 0f       	add	r30, r30
 bd6:	ff 1f       	adc	r31, r31
 bd8:	e8 0f       	add	r30, r24
 bda:	f9 1f       	adc	r31, r25
 bdc:	e9 5d       	subi	r30, 0xD9	; 217
 bde:	f8 4f       	sbci	r31, 0xF8	; 248
 be0:	30 81       	ld	r19, Z
 be2:	33 23       	and	r19, r19
 be4:	79 f3       	breq	.-34     	; 0xbc4 <vTaskSwitchContext+0x38>
 be6:	ac 01       	movw	r20, r24
 be8:	44 0f       	add	r20, r20
 bea:	55 1f       	adc	r21, r21
 bec:	44 0f       	add	r20, r20
 bee:	55 1f       	adc	r21, r21
 bf0:	44 0f       	add	r20, r20
 bf2:	55 1f       	adc	r21, r21
 bf4:	48 0f       	add	r20, r24
 bf6:	59 1f       	adc	r21, r25
 bf8:	da 01       	movw	r26, r20
 bfa:	a9 5d       	subi	r26, 0xD9	; 217
 bfc:	b8 4f       	sbci	r27, 0xF8	; 248
 bfe:	11 96       	adiw	r26, 0x01	; 1
 c00:	ed 91       	ld	r30, X+
 c02:	fc 91       	ld	r31, X
 c04:	12 97       	sbiw	r26, 0x02	; 2
 c06:	02 80       	ldd	r0, Z+2	; 0x02
 c08:	f3 81       	ldd	r31, Z+3	; 0x03
 c0a:	e0 2d       	mov	r30, r0
 c0c:	12 96       	adiw	r26, 0x02	; 2
 c0e:	fc 93       	st	X, r31
 c10:	ee 93       	st	-X, r30
 c12:	11 97       	sbiw	r26, 0x01	; 1
 c14:	46 5d       	subi	r20, 0xD6	; 214
 c16:	58 4f       	sbci	r21, 0xF8	; 248
 c18:	e4 17       	cp	r30, r20
 c1a:	f5 07       	cpc	r31, r21
 c1c:	29 f4       	brne	.+10     	; 0xc28 <vTaskSwitchContext+0x9c>
 c1e:	42 81       	ldd	r20, Z+2	; 0x02
 c20:	53 81       	ldd	r21, Z+3	; 0x03
 c22:	fd 01       	movw	r30, r26
 c24:	52 83       	std	Z+2, r21	; 0x02
 c26:	41 83       	std	Z+1, r20	; 0x01
 c28:	fc 01       	movw	r30, r24
 c2a:	ee 0f       	add	r30, r30
 c2c:	ff 1f       	adc	r31, r31
 c2e:	ee 0f       	add	r30, r30
 c30:	ff 1f       	adc	r31, r31
 c32:	ee 0f       	add	r30, r30
 c34:	ff 1f       	adc	r31, r31
 c36:	8e 0f       	add	r24, r30
 c38:	9f 1f       	adc	r25, r31
 c3a:	fc 01       	movw	r30, r24
 c3c:	e9 5d       	subi	r30, 0xD9	; 217
 c3e:	f8 4f       	sbci	r31, 0xF8	; 248
 c40:	01 80       	ldd	r0, Z+1	; 0x01
 c42:	f2 81       	ldd	r31, Z+2	; 0x02
 c44:	e0 2d       	mov	r30, r0
 c46:	86 81       	ldd	r24, Z+6	; 0x06
 c48:	97 81       	ldd	r25, Z+7	; 0x07
 c4a:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c4e:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c52:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c56:	08 95       	ret

00000c58 <_exit>:
 c58:	f8 94       	cli

00000c5a <__stop_program>:
 c5a:	ff cf       	rjmp	.-2      	; 0xc5a <__stop_program>
