
moh008_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000cfc  00000d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000642  00800110  00800110  00000da0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029c0  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f10  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f5  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f4  00000000  00000000  00006210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fb7  00000000  00000000  00006804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  000077bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  000096af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fa c2       	rjmp	.+1524   	; 0x62a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 35       	cpi	r26, 0x52	; 82
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	51 d1       	rcall	.+674    	; 0x366 <main>
  c4:	19 c6       	rjmp	.+3122   	; 0xcf8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	68 d4       	rcall	.+2256   	; 0x9a0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	fa d4       	rcall	.+2548   	; 0xb1a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <D0_Tick>:
}

enum D4_State {D4_off,D4_on} D4_state;

void D4_Init(){
	D4_state = D4_off;
 246:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <D0_state>
 24a:	88 23       	and	r24, r24
 24c:	19 f0       	breq	.+6      	; 0x254 <D0_Tick+0xe>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	19 f0       	breq	.+6      	; 0x258 <D0_Tick+0x12>
 252:	03 c0       	rjmp	.+6      	; 0x25a <D0_Tick+0x14>
 254:	58 98       	cbi	0x0b, 0	; 11
 256:	01 c0       	rjmp	.+2      	; 0x25a <D0_Tick+0x14>
 258:	58 9a       	sbi	0x0b, 0	; 11
 25a:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <D0_state>
 25e:	88 23       	and	r24, r24
 260:	19 f0       	breq	.+6      	; 0x268 <D0_Tick+0x22>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	29 f0       	breq	.+10     	; 0x270 <D0_Tick+0x2a>
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <D0_state>
 26e:	08 95       	ret
 270:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <D0_state>
 274:	08 95       	ret

00000276 <D2_Tick>:
 276:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <D2_state>
 27a:	88 23       	and	r24, r24
 27c:	19 f0       	breq	.+6      	; 0x284 <D2_Tick+0xe>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	19 f0       	breq	.+6      	; 0x288 <D2_Tick+0x12>
 282:	03 c0       	rjmp	.+6      	; 0x28a <D2_Tick+0x14>
 284:	5a 98       	cbi	0x0b, 2	; 11
 286:	01 c0       	rjmp	.+2      	; 0x28a <D2_Tick+0x14>
 288:	5a 9a       	sbi	0x0b, 2	; 11
 28a:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <D2_state>
 28e:	88 23       	and	r24, r24
 290:	19 f0       	breq	.+6      	; 0x298 <D2_Tick+0x22>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	79 f0       	breq	.+30     	; 0x2b4 <D2_Tick+0x3e>
 296:	08 95       	ret
 298:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <cnt1.2759>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	31 f4       	brne	.+12     	; 0x2ac <D2_Tick+0x36>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <D2_state>
 2a6:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <cnt1.2759>
 2aa:	08 95       	ret
 2ac:	8f 5f       	subi	r24, 0xFF	; 255
 2ae:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <cnt1.2759>
 2b2:	08 95       	ret
 2b4:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <cnt1.2759>
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <D2_Tick+0x50>
 2bc:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <D2_state>
 2c0:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <cnt1.2759>
 2c4:	08 95       	ret
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <cnt1.2759>
 2cc:	08 95       	ret

000002ce <D4_Tick>:
}

void D4_Tick(){
	static unsigned char cnt2 = 0x00;
	//Actions
	switch(D4_state){
 2ce:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <D4_state>
 2d2:	88 23       	and	r24, r24
 2d4:	19 f0       	breq	.+6      	; 0x2dc <D4_Tick+0xe>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <D4_Tick+0x12>
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <D4_Tick+0x14>
		case D4_off:
		PORTD = PORTD & 0xEF;
 2dc:	5c 98       	cbi	0x0b, 4	; 11
		break;
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <D4_Tick+0x14>
		
		case D4_on:
		PORTD = PORTD | 0x10;
 2e0:	5c 9a       	sbi	0x0b, 4	; 11
		
		default:
		break;
	}
	//Transitions
	switch(D4_state){
 2e2:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <D4_state>
 2e6:	88 23       	and	r24, r24
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <D4_Tick+0x22>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	79 f0       	breq	.+30     	; 0x30c <D4_Tick+0x3e>
 2ee:	08 95       	ret
		case D4_off:
		if(cnt2 == 0x05)
 2f0:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <cnt2.2776>
 2f4:	85 30       	cpi	r24, 0x05	; 5
 2f6:	31 f4       	brne	.+12     	; 0x304 <D4_Tick+0x36>
		{
			D4_state = D4_on;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <D4_state>
			cnt2 = 0x00;
 2fe:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <cnt2.2776>
 302:	08 95       	ret
		}
		else
		{
			cnt2++;
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <cnt2.2776>
 30a:	08 95       	ret
		}
		break;
		
		case D4_on:
		if(cnt2 == 0x05)
 30c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <cnt2.2776>
 310:	85 30       	cpi	r24, 0x05	; 5
 312:	29 f4       	brne	.+10     	; 0x31e <D4_Tick+0x50>
		{
			D4_state = D4_off;
 314:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <D4_state>
			cnt2 = 0x00;
 318:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <cnt2.2776>
 31c:	08 95       	ret
		}
		else
		{
			cnt2++;
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <cnt2.2776>
 324:	08 95       	ret

00000326 <LedSecTask>:


enum D0_State {D0_off,D0_on} D0_state;

void D0_Init(){
	D0_state = D0_off;
 326:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <D0_state>
}

enum D2_State {D2_off,D2_on} D2_state;

void D2_Init(){
	D2_state = D2_off;
 32a:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <D2_state>
}

enum D4_State {D4_off,D4_on} D4_state;

void D4_Init(){
	D4_state = D4_off;
 32e:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <D4_state>
	D2_Init();
	D4_Init();
	
	for(;;)
	{
		D0_Tick();
 332:	89 df       	rcall	.-238    	; 0x246 <D0_Tick>
		D2_Tick();
 334:	a0 df       	rcall	.-192    	; 0x276 <D2_Tick>
		D4_Tick();
 336:	cb df       	rcall	.-106    	; 0x2ce <D4_Tick>
		vTaskDelay(500);
 338:	84 ef       	ldi	r24, 0xF4	; 244
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	67 d4       	rcall	.+2254   	; 0xc0c <vTaskDelay>
 33e:	f9 cf       	rjmp	.-14     	; 0x332 <LedSecTask+0xc>

00000340 <StartSecPulse>:
 340:	ef 92       	push	r14
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
	xTaskCreate(LedSecTask,
 346:	e1 2c       	mov	r14, r1
 348:	f1 2c       	mov	r15, r1
 34a:	08 2f       	mov	r16, r24
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	45 e5       	ldi	r20, 0x55	; 85
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	71 e0       	ldi	r23, 0x01	; 1
 358:	83 e9       	ldi	r24, 0x93	; 147
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	fc d1       	rcall	.+1016   	; 0x756 <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	08 95       	ret

00000366 <main>:

int main(void) {
	DDRA = 0x00; PORTA=0xFF;
 366:	11 b8       	out	0x01, r1	; 1
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
 36c:	8a b9       	out	0x0a, r24	; 10
	//Start Tasks
	StartSecPulse(1);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	e7 df       	rcall	.-50     	; 0x340 <StartSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 372:	ee d2       	rcall	.+1500   	; 0x950 <vTaskStartScheduler>
 374:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	08 95       	ret

0000037a <pxPortInitialiseStack>:
 37a:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 37c:	fc 01       	movw	r30, r24
 37e:	30 83       	st	Z, r19
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	22 e2       	ldi	r18, 0x22	; 34
 384:	20 83       	st	Z, r18
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	a3 e3       	ldi	r26, 0x33	; 51
 38a:	a0 83       	st	Z, r26
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	60 83       	st	Z, r22
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	70 83       	st	Z, r23
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	10 82       	st	Z, r1
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	60 e8       	ldi	r22, 0x80	; 128
 39c:	60 83       	st	Z, r22
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	10 82       	st	Z, r1
 3a2:	31 97       	sbiw	r30, 0x01	; 1
 3a4:	62 e0       	ldi	r22, 0x02	; 2
 3a6:	60 83       	st	Z, r22
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	60 83       	st	Z, r22
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	64 e0       	ldi	r22, 0x04	; 4
 3b2:	60 83       	st	Z, r22
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	65 e0       	ldi	r22, 0x05	; 5
 3b8:	60 83       	st	Z, r22
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	60 83       	st	Z, r22
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	67 e0       	ldi	r22, 0x07	; 7
 3c4:	60 83       	st	Z, r22
 3c6:	31 97       	sbiw	r30, 0x01	; 1
 3c8:	68 e0       	ldi	r22, 0x08	; 8
 3ca:	60 83       	st	Z, r22
 3cc:	31 97       	sbiw	r30, 0x01	; 1
 3ce:	69 e0       	ldi	r22, 0x09	; 9
 3d0:	60 83       	st	Z, r22
 3d2:	31 97       	sbiw	r30, 0x01	; 1
 3d4:	60 e1       	ldi	r22, 0x10	; 16
 3d6:	60 83       	st	Z, r22
 3d8:	31 97       	sbiw	r30, 0x01	; 1
 3da:	30 83       	st	Z, r19
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	32 e1       	ldi	r19, 0x12	; 18
 3e0:	30 83       	st	Z, r19
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	33 e1       	ldi	r19, 0x13	; 19
 3e6:	30 83       	st	Z, r19
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	34 e1       	ldi	r19, 0x14	; 20
 3ec:	30 83       	st	Z, r19
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	35 e1       	ldi	r19, 0x15	; 21
 3f2:	30 83       	st	Z, r19
 3f4:	31 97       	sbiw	r30, 0x01	; 1
 3f6:	36 e1       	ldi	r19, 0x16	; 22
 3f8:	30 83       	st	Z, r19
 3fa:	31 97       	sbiw	r30, 0x01	; 1
 3fc:	37 e1       	ldi	r19, 0x17	; 23
 3fe:	30 83       	st	Z, r19
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	38 e1       	ldi	r19, 0x18	; 24
 404:	30 83       	st	Z, r19
 406:	31 97       	sbiw	r30, 0x01	; 1
 408:	39 e1       	ldi	r19, 0x19	; 25
 40a:	30 83       	st	Z, r19
 40c:	31 97       	sbiw	r30, 0x01	; 1
 40e:	30 e2       	ldi	r19, 0x20	; 32
 410:	30 83       	st	Z, r19
 412:	31 97       	sbiw	r30, 0x01	; 1
 414:	31 e2       	ldi	r19, 0x21	; 33
 416:	30 83       	st	Z, r19
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	20 83       	st	Z, r18
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	23 e2       	ldi	r18, 0x23	; 35
 420:	20 83       	st	Z, r18
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	40 83       	st	Z, r20
 426:	31 97       	sbiw	r30, 0x01	; 1
 428:	50 83       	st	Z, r21
 42a:	31 97       	sbiw	r30, 0x01	; 1
 42c:	26 e2       	ldi	r18, 0x26	; 38
 42e:	20 83       	st	Z, r18
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	27 e2       	ldi	r18, 0x27	; 39
 434:	20 83       	st	Z, r18
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	28 e2       	ldi	r18, 0x28	; 40
 43a:	20 83       	st	Z, r18
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	29 e2       	ldi	r18, 0x29	; 41
 440:	20 83       	st	Z, r18
 442:	31 97       	sbiw	r30, 0x01	; 1
 444:	20 e3       	ldi	r18, 0x30	; 48
 446:	20 83       	st	Z, r18
 448:	31 97       	sbiw	r30, 0x01	; 1
 44a:	21 e3       	ldi	r18, 0x31	; 49
 44c:	20 83       	st	Z, r18
 44e:	86 97       	sbiw	r24, 0x26	; 38
 450:	08 95       	ret

00000452 <xPortStartScheduler>:
 452:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 456:	8c e7       	ldi	r24, 0x7C	; 124
 458:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 45c:	8b e0       	ldi	r24, 0x0B	; 11
 45e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 462:	ef e6       	ldi	r30, 0x6F	; 111
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	82 60       	ori	r24, 0x02	; 2
 46a:	80 83       	st	Z, r24
 46c:	a0 91 4d 07 	lds	r26, 0x074D	; 0x80074d <pxCurrentTCB>
 470:	b0 91 4e 07 	lds	r27, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 474:	cd 91       	ld	r28, X+
 476:	cd bf       	out	0x3d, r28	; 61
 478:	dd 91       	ld	r29, X+
 47a:	de bf       	out	0x3e, r29	; 62
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	ff 90       	pop	r15
 49e:	ef 90       	pop	r14
 4a0:	df 90       	pop	r13
 4a2:	cf 90       	pop	r12
 4a4:	bf 90       	pop	r11
 4a6:	af 90       	pop	r10
 4a8:	9f 90       	pop	r9
 4aa:	8f 90       	pop	r8
 4ac:	7f 90       	pop	r7
 4ae:	6f 90       	pop	r6
 4b0:	5f 90       	pop	r5
 4b2:	4f 90       	pop	r4
 4b4:	3f 90       	pop	r3
 4b6:	2f 90       	pop	r2
 4b8:	1f 90       	pop	r1
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	08 95       	ret
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret

000004c6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	0f 92       	push	r0
 4ce:	1f 92       	push	r1
 4d0:	11 24       	eor	r1, r1
 4d2:	2f 92       	push	r2
 4d4:	3f 92       	push	r3
 4d6:	4f 92       	push	r4
 4d8:	5f 92       	push	r5
 4da:	6f 92       	push	r6
 4dc:	7f 92       	push	r7
 4de:	8f 92       	push	r8
 4e0:	9f 92       	push	r9
 4e2:	af 92       	push	r10
 4e4:	bf 92       	push	r11
 4e6:	cf 92       	push	r12
 4e8:	df 92       	push	r13
 4ea:	ef 92       	push	r14
 4ec:	ff 92       	push	r15
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	2f 93       	push	r18
 4f4:	3f 93       	push	r19
 4f6:	4f 93       	push	r20
 4f8:	5f 93       	push	r21
 4fa:	6f 93       	push	r22
 4fc:	7f 93       	push	r23
 4fe:	8f 93       	push	r24
 500:	9f 93       	push	r25
 502:	af 93       	push	r26
 504:	bf 93       	push	r27
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
 50e:	a0 91 4d 07 	lds	r26, 0x074D	; 0x80074d <pxCurrentTCB>
 512:	b0 91 4e 07 	lds	r27, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 516:	0d b6       	in	r0, 0x3d	; 61
 518:	0d 92       	st	X+, r0
 51a:	0e b6       	in	r0, 0x3e	; 62
 51c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 51e:	86 d3       	rcall	.+1804   	; 0xc2c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 520:	a0 91 4d 07 	lds	r26, 0x074D	; 0x80074d <pxCurrentTCB>
 524:	b0 91 4e 07 	lds	r27, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 528:	cd 91       	ld	r28, X+
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	dd 91       	ld	r29, X+
 52e:	de bf       	out	0x3e, r29	; 62
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	4f 91       	pop	r20
 548:	3f 91       	pop	r19
 54a:	2f 91       	pop	r18
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
 556:	cf 90       	pop	r12
 558:	bf 90       	pop	r11
 55a:	af 90       	pop	r10
 55c:	9f 90       	pop	r9
 55e:	8f 90       	pop	r8
 560:	7f 90       	pop	r7
 562:	6f 90       	pop	r6
 564:	5f 90       	pop	r5
 566:	4f 90       	pop	r4
 568:	3f 90       	pop	r3
 56a:	2f 90       	pop	r2
 56c:	1f 90       	pop	r1
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0

	asm volatile ( "ret" );
 574:	08 95       	ret

00000576 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	0f 92       	push	r0
 57e:	1f 92       	push	r1
 580:	11 24       	eor	r1, r1
 582:	2f 92       	push	r2
 584:	3f 92       	push	r3
 586:	4f 92       	push	r4
 588:	5f 92       	push	r5
 58a:	6f 92       	push	r6
 58c:	7f 92       	push	r7
 58e:	8f 92       	push	r8
 590:	9f 92       	push	r9
 592:	af 92       	push	r10
 594:	bf 92       	push	r11
 596:	cf 92       	push	r12
 598:	df 92       	push	r13
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
 5be:	a0 91 4d 07 	lds	r26, 0x074D	; 0x80074d <pxCurrentTCB>
 5c2:	b0 91 4e 07 	lds	r27, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 5c6:	0d b6       	in	r0, 0x3d	; 61
 5c8:	0d 92       	st	X+, r0
 5ca:	0e b6       	in	r0, 0x3e	; 62
 5cc:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 5ce:	ee d1       	rcall	.+988    	; 0x9ac <xTaskIncrementTick>
 5d0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 5d2:	2c d3       	rcall	.+1624   	; 0xc2c <vTaskSwitchContext>
 5d4:	a0 91 4d 07 	lds	r26, 0x074D	; 0x80074d <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 5d8:	b0 91 4e 07 	lds	r27, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 5dc:	cd 91       	ld	r28, X+
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	dd 91       	ld	r29, X+
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	bf 91       	pop	r27
 5ee:	af 91       	pop	r26
 5f0:	9f 91       	pop	r25
 5f2:	8f 91       	pop	r24
 5f4:	7f 91       	pop	r23
 5f6:	6f 91       	pop	r22
 5f8:	5f 91       	pop	r21
 5fa:	4f 91       	pop	r20
 5fc:	3f 91       	pop	r19
 5fe:	2f 91       	pop	r18
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	ff 90       	pop	r15
 606:	ef 90       	pop	r14
 608:	df 90       	pop	r13
 60a:	cf 90       	pop	r12
 60c:	bf 90       	pop	r11
 60e:	af 90       	pop	r10
 610:	9f 90       	pop	r9
 612:	8f 90       	pop	r8
 614:	7f 90       	pop	r7
 616:	6f 90       	pop	r6
 618:	5f 90       	pop	r5
 61a:	4f 90       	pop	r4
 61c:	3f 90       	pop	r3
 61e:	2f 90       	pop	r2
 620:	1f 90       	pop	r1
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	08 95       	ret

0000062a <__vector_13>:

	asm volatile ( "ret" );
 62a:	a5 df       	rcall	.-182    	; 0x576 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 62c:	18 95       	reti

0000062e <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 62e:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <pxDelayedTaskList>
 632:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <pxDelayedTaskList+0x1>
 636:	80 81       	ld	r24, Z
 638:	81 11       	cpse	r24, r1
 63a:	07 c0       	rjmp	.+14     	; 0x64a <prvResetNextTaskUnblockTime+0x1c>
 63c:	8f ef       	ldi	r24, 0xFF	; 255
 63e:	9f ef       	ldi	r25, 0xFF	; 255
 640:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 644:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
 648:	08 95       	ret
 64a:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <pxDelayedTaskList>
 64e:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <pxDelayedTaskList+0x1>
 652:	05 80       	ldd	r0, Z+5	; 0x05
 654:	f6 81       	ldd	r31, Z+6	; 0x06
 656:	e0 2d       	mov	r30, r0
 658:	06 80       	ldd	r0, Z+6	; 0x06
 65a:	f7 81       	ldd	r31, Z+7	; 0x07
 65c:	e0 2d       	mov	r30, r0
 65e:	82 81       	ldd	r24, Z+2	; 0x02
 660:	93 81       	ldd	r25, Z+3	; 0x03
 662:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 666:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
 66a:	08 95       	ret

0000066c <prvIdleTask>:
 66c:	01 e0       	ldi	r16, 0x01	; 1
 66e:	17 e0       	ldi	r17, 0x07	; 7
 670:	0f 2e       	mov	r0, r31
 672:	f9 e2       	ldi	r31, 0x29	; 41
 674:	ef 2e       	mov	r14, r31
 676:	f7 e0       	ldi	r31, 0x07	; 7
 678:	ff 2e       	mov	r15, r31
 67a:	f0 2d       	mov	r31, r0
 67c:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxDeletedTasksWaitingCleanUp>
 680:	88 23       	and	r24, r24
 682:	11 f1       	breq	.+68     	; 0x6c8 <prvIdleTask+0x5c>
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	f8 94       	cli
 688:	0f 92       	push	r0
 68a:	d8 01       	movw	r26, r16
 68c:	15 96       	adiw	r26, 0x05	; 5
 68e:	ed 91       	ld	r30, X+
 690:	fc 91       	ld	r31, X
 692:	16 97       	sbiw	r26, 0x06	; 6
 694:	c6 81       	ldd	r28, Z+6	; 0x06
 696:	d7 81       	ldd	r29, Z+7	; 0x07
 698:	ce 01       	movw	r24, r28
 69a:	02 96       	adiw	r24, 0x02	; 2
 69c:	ad dd       	rcall	.-1190   	; 0x1f8 <uxListRemove>
 69e:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxCurrentNumberOfTasks>
 6a2:	81 50       	subi	r24, 0x01	; 1
 6a4:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <uxCurrentNumberOfTasks>
 6a8:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxDeletedTasksWaitingCleanUp>
 6ac:	81 50       	subi	r24, 0x01	; 1
 6ae:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <uxDeletedTasksWaitingCleanUp>
 6b2:	0f 90       	pop	r0
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	8f 89       	ldd	r24, Y+23	; 0x17
 6b8:	98 8d       	ldd	r25, Y+24	; 0x18
 6ba:	39 dd       	rcall	.-1422   	; 0x12e <vPortFree>
 6bc:	ce 01       	movw	r24, r28
 6be:	37 dd       	rcall	.-1426   	; 0x12e <vPortFree>
 6c0:	80 91 00 07 	lds	r24, 0x0700	; 0x800700 <uxDeletedTasksWaitingCleanUp>
 6c4:	81 11       	cpse	r24, r1
 6c6:	de cf       	rjmp	.-68     	; 0x684 <prvIdleTask+0x18>
 6c8:	f7 01       	movw	r30, r14
 6ca:	80 81       	ld	r24, Z
 6cc:	82 30       	cpi	r24, 0x02	; 2
 6ce:	b0 f2       	brcs	.-84     	; 0x67c <prvIdleTask+0x10>
 6d0:	fa de       	rcall	.-524    	; 0x4c6 <vPortYield>
 6d2:	d4 cf       	rjmp	.-88     	; 0x67c <prvIdleTask+0x10>

000006d4 <prvAddCurrentTaskToDelayedList>:
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	ec 01       	movw	r28, r24
 6de:	00 91 fd 06 	lds	r16, 0x06FD	; 0x8006fd <xTickCount>
 6e2:	10 91 fe 06 	lds	r17, 0x06FE	; 0x8006fe <xTickCount+0x1>
 6e6:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <pxCurrentTCB>
 6ea:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 6ee:	02 96       	adiw	r24, 0x02	; 2
 6f0:	83 dd       	rcall	.-1274   	; 0x1f8 <uxListRemove>
 6f2:	c0 0f       	add	r28, r16
 6f4:	d1 1f       	adc	r29, r17
 6f6:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxCurrentTCB>
 6fa:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 6fe:	d3 83       	std	Z+3, r29	; 0x03
 700:	c2 83       	std	Z+2, r28	; 0x02
 702:	c0 17       	cp	r28, r16
 704:	d1 07       	cpc	r29, r17
 706:	60 f4       	brcc	.+24     	; 0x720 <prvAddCurrentTaskToDelayedList+0x4c>
 708:	60 91 4d 07 	lds	r22, 0x074D	; 0x80074d <pxCurrentTCB>
 70c:	70 91 4e 07 	lds	r23, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 710:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxOverflowDelayedTaskList>
 714:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxOverflowDelayedTaskList+0x1>
 718:	6e 5f       	subi	r22, 0xFE	; 254
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	3c dd       	rcall	.-1416   	; 0x196 <vListInsert>
 71e:	16 c0       	rjmp	.+44     	; 0x74c <prvAddCurrentTaskToDelayedList+0x78>
 720:	60 91 4d 07 	lds	r22, 0x074D	; 0x80074d <pxCurrentTCB>
 724:	70 91 4e 07 	lds	r23, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 728:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxDelayedTaskList>
 72c:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxDelayedTaskList+0x1>
 730:	6e 5f       	subi	r22, 0xFE	; 254
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	30 dd       	rcall	.-1440   	; 0x196 <vListInsert>
 736:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xNextTaskUnblockTime>
 73a:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 73e:	c8 17       	cp	r28, r24
 740:	d9 07       	cpc	r29, r25
 742:	20 f4       	brcc	.+8      	; 0x74c <prvAddCurrentTaskToDelayedList+0x78>
 744:	d0 93 f6 06 	sts	0x06F6, r29	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 748:	c0 93 f5 06 	sts	0x06F5, r28	; 0x8006f5 <xNextTaskUnblockTime>
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	1f 91       	pop	r17
 752:	0f 91       	pop	r16
 754:	08 95       	ret

00000756 <xTaskCreate>:
 756:	4f 92       	push	r4
 758:	5f 92       	push	r5
 75a:	6f 92       	push	r6
 75c:	7f 92       	push	r7
 75e:	8f 92       	push	r8
 760:	9f 92       	push	r9
 762:	af 92       	push	r10
 764:	bf 92       	push	r11
 766:	cf 92       	push	r12
 768:	df 92       	push	r13
 76a:	ef 92       	push	r14
 76c:	ff 92       	push	r15
 76e:	0f 93       	push	r16
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	4c 01       	movw	r8, r24
 776:	6b 01       	movw	r12, r22
 778:	5a 01       	movw	r10, r20
 77a:	29 01       	movw	r4, r18
 77c:	ca 01       	movw	r24, r20
 77e:	a4 dc       	rcall	.-1720   	; 0xc8 <pvPortMalloc>
 780:	3c 01       	movw	r6, r24
 782:	89 2b       	or	r24, r25
 784:	09 f4       	brne	.+2      	; 0x788 <xTaskCreate+0x32>
 786:	d3 c0       	rjmp	.+422    	; 0x92e <xTaskCreate+0x1d8>
 788:	86 e2       	ldi	r24, 0x26	; 38
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	9d dc       	rcall	.-1734   	; 0xc8 <pvPortMalloc>
 78e:	ec 01       	movw	r28, r24
 790:	89 2b       	or	r24, r25
 792:	59 f0       	breq	.+22     	; 0x7aa <xTaskCreate+0x54>
 794:	78 8e       	std	Y+24, r7	; 0x18
 796:	6f 8a       	std	Y+23, r6	; 0x17
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	a8 1a       	sub	r10, r24
 79c:	b1 08       	sbc	r11, r1
 79e:	a6 0c       	add	r10, r6
 7a0:	b7 1c       	adc	r11, r7
 7a2:	c1 14       	cp	r12, r1
 7a4:	d1 04       	cpc	r13, r1
 7a6:	21 f4       	brne	.+8      	; 0x7b0 <xTaskCreate+0x5a>
 7a8:	1f c0       	rjmp	.+62     	; 0x7e8 <xTaskCreate+0x92>
 7aa:	c3 01       	movw	r24, r6
 7ac:	c0 dc       	rcall	.-1664   	; 0x12e <vPortFree>
 7ae:	bf c0       	rjmp	.+382    	; 0x92e <xTaskCreate+0x1d8>
 7b0:	d6 01       	movw	r26, r12
 7b2:	8c 91       	ld	r24, X
 7b4:	89 8f       	std	Y+25, r24	; 0x19
 7b6:	8c 91       	ld	r24, X
 7b8:	88 23       	and	r24, r24
 7ba:	a1 f0       	breq	.+40     	; 0x7e4 <xTaskCreate+0x8e>
 7bc:	ae 01       	movw	r20, r28
 7be:	46 5e       	subi	r20, 0xE6	; 230
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
 7c2:	f6 01       	movw	r30, r12
 7c4:	31 96       	adiw	r30, 0x01	; 1
 7c6:	b8 e0       	ldi	r27, 0x08	; 8
 7c8:	cb 0e       	add	r12, r27
 7ca:	d1 1c       	adc	r13, r1
 7cc:	cf 01       	movw	r24, r30
 7ce:	21 91       	ld	r18, Z+
 7d0:	da 01       	movw	r26, r20
 7d2:	2d 93       	st	X+, r18
 7d4:	ad 01       	movw	r20, r26
 7d6:	dc 01       	movw	r26, r24
 7d8:	8c 91       	ld	r24, X
 7da:	88 23       	and	r24, r24
 7dc:	19 f0       	breq	.+6      	; 0x7e4 <xTaskCreate+0x8e>
 7de:	ec 15       	cp	r30, r12
 7e0:	fd 05       	cpc	r31, r13
 7e2:	a1 f7       	brne	.-24     	; 0x7cc <xTaskCreate+0x76>
 7e4:	18 a2       	std	Y+32, r1	; 0x20
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <xTaskCreate+0x94>
 7e8:	19 8e       	std	Y+25, r1	; 0x19
 7ea:	04 30       	cpi	r16, 0x04	; 4
 7ec:	08 f0       	brcs	.+2      	; 0x7f0 <xTaskCreate+0x9a>
 7ee:	03 e0       	ldi	r16, 0x03	; 3
 7f0:	0e 8b       	std	Y+22, r16	; 0x16
 7f2:	6e 01       	movw	r12, r28
 7f4:	b2 e0       	ldi	r27, 0x02	; 2
 7f6:	cb 0e       	add	r12, r27
 7f8:	d1 1c       	adc	r13, r1
 7fa:	c6 01       	movw	r24, r12
 7fc:	a7 dc       	rcall	.-1714   	; 0x14c <vListInitialiseItem>
 7fe:	ce 01       	movw	r24, r28
 800:	0c 96       	adiw	r24, 0x0c	; 12
 802:	a4 dc       	rcall	.-1720   	; 0x14c <vListInitialiseItem>
 804:	d9 87       	std	Y+9, r29	; 0x09
 806:	c8 87       	std	Y+8, r28	; 0x08
 808:	84 e0       	ldi	r24, 0x04	; 4
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	80 1b       	sub	r24, r16
 80e:	91 09       	sbc	r25, r1
 810:	9d 87       	std	Y+13, r25	; 0x0d
 812:	8c 87       	std	Y+12, r24	; 0x0c
 814:	db 8b       	std	Y+19, r29	; 0x13
 816:	ca 8b       	std	Y+18, r28	; 0x12
 818:	19 a2       	std	Y+33, r1	; 0x21
 81a:	1a a2       	std	Y+34, r1	; 0x22
 81c:	1b a2       	std	Y+35, r1	; 0x23
 81e:	1c a2       	std	Y+36, r1	; 0x24
 820:	1d a2       	std	Y+37, r1	; 0x25
 822:	a2 01       	movw	r20, r4
 824:	b4 01       	movw	r22, r8
 826:	c5 01       	movw	r24, r10
 828:	a8 dd       	rcall	.-1200   	; 0x37a <pxPortInitialiseStack>
 82a:	99 83       	std	Y+1, r25	; 0x01
 82c:	88 83       	st	Y, r24
 82e:	e1 14       	cp	r14, r1
 830:	f1 04       	cpc	r15, r1
 832:	19 f0       	breq	.+6      	; 0x83a <xTaskCreate+0xe4>
 834:	f7 01       	movw	r30, r14
 836:	d1 83       	std	Z+1, r29	; 0x01
 838:	c0 83       	st	Z, r28
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	f8 94       	cli
 83e:	0f 92       	push	r0
 840:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxCurrentNumberOfTasks>
 844:	8f 5f       	subi	r24, 0xFF	; 255
 846:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <uxCurrentNumberOfTasks>
 84a:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <pxCurrentTCB>
 84e:	90 91 4e 07 	lds	r25, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 852:	89 2b       	or	r24, r25
 854:	69 f5       	brne	.+90     	; 0x8b0 <xTaskCreate+0x15a>
 856:	d0 93 4e 07 	sts	0x074E, r29	; 0x80074e <pxCurrentTCB+0x1>
 85a:	c0 93 4d 07 	sts	0x074D, r28	; 0x80074d <pxCurrentTCB>
 85e:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxCurrentNumberOfTasks>
 862:	81 30       	cpi	r24, 0x01	; 1
 864:	a9 f5       	brne	.+106    	; 0x8d0 <xTaskCreate+0x17a>
 866:	89 e2       	ldi	r24, 0x29	; 41
 868:	97 e0       	ldi	r25, 0x07	; 7
 86a:	62 dc       	rcall	.-1852   	; 0x130 <vListInitialise>
 86c:	82 e3       	ldi	r24, 0x32	; 50
 86e:	97 e0       	ldi	r25, 0x07	; 7
 870:	5f dc       	rcall	.-1858   	; 0x130 <vListInitialise>
 872:	8b e3       	ldi	r24, 0x3B	; 59
 874:	97 e0       	ldi	r25, 0x07	; 7
 876:	5c dc       	rcall	.-1864   	; 0x130 <vListInitialise>
 878:	84 e4       	ldi	r24, 0x44	; 68
 87a:	97 e0       	ldi	r25, 0x07	; 7
 87c:	59 dc       	rcall	.-1870   	; 0x130 <vListInitialise>
 87e:	80 e2       	ldi	r24, 0x20	; 32
 880:	97 e0       	ldi	r25, 0x07	; 7
 882:	56 dc       	rcall	.-1876   	; 0x130 <vListInitialise>
 884:	87 e1       	ldi	r24, 0x17	; 23
 886:	97 e0       	ldi	r25, 0x07	; 7
 888:	53 dc       	rcall	.-1882   	; 0x130 <vListInitialise>
 88a:	8a e0       	ldi	r24, 0x0A	; 10
 88c:	97 e0       	ldi	r25, 0x07	; 7
 88e:	50 dc       	rcall	.-1888   	; 0x130 <vListInitialise>
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	97 e0       	ldi	r25, 0x07	; 7
 894:	4d dc       	rcall	.-1894   	; 0x130 <vListInitialise>
 896:	80 e2       	ldi	r24, 0x20	; 32
 898:	97 e0       	ldi	r25, 0x07	; 7
 89a:	90 93 16 07 	sts	0x0716, r25	; 0x800716 <pxDelayedTaskList+0x1>
 89e:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <pxDelayedTaskList>
 8a2:	87 e1       	ldi	r24, 0x17	; 23
 8a4:	97 e0       	ldi	r25, 0x07	; 7
 8a6:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxOverflowDelayedTaskList+0x1>
 8aa:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxOverflowDelayedTaskList>
 8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <xTaskCreate+0x17a>
 8b0:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xSchedulerRunning>
 8b4:	81 11       	cpse	r24, r1
 8b6:	0c c0       	rjmp	.+24     	; 0x8d0 <xTaskCreate+0x17a>
 8b8:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxCurrentTCB>
 8bc:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 8c0:	96 89       	ldd	r25, Z+22	; 0x16
 8c2:	8e 89       	ldd	r24, Y+22	; 0x16
 8c4:	89 17       	cp	r24, r25
 8c6:	20 f0       	brcs	.+8      	; 0x8d0 <xTaskCreate+0x17a>
 8c8:	d0 93 4e 07 	sts	0x074E, r29	; 0x80074e <pxCurrentTCB+0x1>
 8cc:	c0 93 4d 07 	sts	0x074D, r28	; 0x80074d <pxCurrentTCB>
 8d0:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <uxTaskNumber>
 8d4:	8f 5f       	subi	r24, 0xFF	; 255
 8d6:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <uxTaskNumber>
 8da:	8e 89       	ldd	r24, Y+22	; 0x16
 8dc:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 8e0:	98 17       	cp	r25, r24
 8e2:	10 f4       	brcc	.+4      	; 0x8e8 <xTaskCreate+0x192>
 8e4:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxTopReadyPriority>
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	9c 01       	movw	r18, r24
 8ec:	22 0f       	add	r18, r18
 8ee:	33 1f       	adc	r19, r19
 8f0:	22 0f       	add	r18, r18
 8f2:	33 1f       	adc	r19, r19
 8f4:	22 0f       	add	r18, r18
 8f6:	33 1f       	adc	r19, r19
 8f8:	82 0f       	add	r24, r18
 8fa:	93 1f       	adc	r25, r19
 8fc:	b6 01       	movw	r22, r12
 8fe:	87 5d       	subi	r24, 0xD7	; 215
 900:	98 4f       	sbci	r25, 0xF8	; 248
 902:	28 dc       	rcall	.-1968   	; 0x154 <vListInsertEnd>
 904:	0f 90       	pop	r0
 906:	0f be       	out	0x3f, r0	; 63
 908:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <xSchedulerRunning>
 90c:	88 23       	and	r24, r24
 90e:	59 f0       	breq	.+22     	; 0x926 <xTaskCreate+0x1d0>
 910:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxCurrentTCB>
 914:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 918:	96 89       	ldd	r25, Z+22	; 0x16
 91a:	8e 89       	ldd	r24, Y+22	; 0x16
 91c:	98 17       	cp	r25, r24
 91e:	28 f4       	brcc	.+10     	; 0x92a <xTaskCreate+0x1d4>
 920:	d2 dd       	rcall	.-1116   	; 0x4c6 <vPortYield>
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	05 c0       	rjmp	.+10     	; 0x930 <xTaskCreate+0x1da>
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	03 c0       	rjmp	.+6      	; 0x930 <xTaskCreate+0x1da>
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	01 c0       	rjmp	.+2      	; 0x930 <xTaskCreate+0x1da>
 92e:	8f ef       	ldi	r24, 0xFF	; 255
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	0f 91       	pop	r16
 936:	ff 90       	pop	r15
 938:	ef 90       	pop	r14
 93a:	df 90       	pop	r13
 93c:	cf 90       	pop	r12
 93e:	bf 90       	pop	r11
 940:	af 90       	pop	r10
 942:	9f 90       	pop	r9
 944:	8f 90       	pop	r8
 946:	7f 90       	pop	r7
 948:	6f 90       	pop	r6
 94a:	5f 90       	pop	r5
 94c:	4f 90       	pop	r4
 94e:	08 95       	ret

00000950 <vTaskStartScheduler>:
 950:	ef 92       	push	r14
 952:	ff 92       	push	r15
 954:	0f 93       	push	r16
 956:	0f 2e       	mov	r0, r31
 958:	f3 ef       	ldi	r31, 0xF3	; 243
 95a:	ef 2e       	mov	r14, r31
 95c:	f6 e0       	ldi	r31, 0x06	; 6
 95e:	ff 2e       	mov	r15, r31
 960:	f0 2d       	mov	r31, r0
 962:	00 e0       	ldi	r16, 0x00	; 0
 964:	20 e0       	ldi	r18, 0x00	; 0
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	45 e5       	ldi	r20, 0x55	; 85
 96a:	50 e0       	ldi	r21, 0x00	; 0
 96c:	6b e0       	ldi	r22, 0x0B	; 11
 96e:	71 e0       	ldi	r23, 0x01	; 1
 970:	86 e3       	ldi	r24, 0x36	; 54
 972:	93 e0       	ldi	r25, 0x03	; 3
 974:	f0 de       	rcall	.-544    	; 0x756 <xTaskCreate>
 976:	81 30       	cpi	r24, 0x01	; 1
 978:	79 f4       	brne	.+30     	; 0x998 <vTaskStartScheduler+0x48>
 97a:	f8 94       	cli
 97c:	8f ef       	ldi	r24, 0xFF	; 255
 97e:	9f ef       	ldi	r25, 0xFF	; 255
 980:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 984:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <xSchedulerRunning>
 98e:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <xTickCount+0x1>
 992:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <xTickCount>
 996:	5d dd       	rcall	.-1350   	; 0x452 <xPortStartScheduler>
 998:	0f 91       	pop	r16
 99a:	ff 90       	pop	r15
 99c:	ef 90       	pop	r14
 99e:	08 95       	ret

000009a0 <vTaskSuspendAll>:
 9a0:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 9a4:	8f 5f       	subi	r24, 0xFF	; 255
 9a6:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <uxSchedulerSuspended>
 9aa:	08 95       	ret

000009ac <xTaskIncrementTick>:
 9ac:	cf 92       	push	r12
 9ae:	df 92       	push	r13
 9b0:	ef 92       	push	r14
 9b2:	ff 92       	push	r15
 9b4:	0f 93       	push	r16
 9b6:	1f 93       	push	r17
 9b8:	cf 93       	push	r28
 9ba:	df 93       	push	r29
 9bc:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 9c0:	81 11       	cpse	r24, r1
 9c2:	95 c0       	rjmp	.+298    	; 0xaee <xTaskIncrementTick+0x142>
 9c4:	e0 90 fd 06 	lds	r14, 0x06FD	; 0x8006fd <xTickCount>
 9c8:	f0 90 fe 06 	lds	r15, 0x06FE	; 0x8006fe <xTickCount+0x1>
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	e8 1a       	sub	r14, r24
 9d0:	f8 0a       	sbc	r15, r24
 9d2:	f0 92 fe 06 	sts	0x06FE, r15	; 0x8006fe <xTickCount+0x1>
 9d6:	e0 92 fd 06 	sts	0x06FD, r14	; 0x8006fd <xTickCount>
 9da:	e1 14       	cp	r14, r1
 9dc:	f1 04       	cpc	r15, r1
 9de:	b1 f4       	brne	.+44     	; 0xa0c <xTaskIncrementTick+0x60>
 9e0:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <pxDelayedTaskList>
 9e4:	90 91 16 07 	lds	r25, 0x0716	; 0x800716 <pxDelayedTaskList+0x1>
 9e8:	20 91 13 07 	lds	r18, 0x0713	; 0x800713 <pxOverflowDelayedTaskList>
 9ec:	30 91 14 07 	lds	r19, 0x0714	; 0x800714 <pxOverflowDelayedTaskList+0x1>
 9f0:	30 93 16 07 	sts	0x0716, r19	; 0x800716 <pxDelayedTaskList+0x1>
 9f4:	20 93 15 07 	sts	0x0715, r18	; 0x800715 <pxDelayedTaskList>
 9f8:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxOverflowDelayedTaskList+0x1>
 9fc:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxOverflowDelayedTaskList>
 a00:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <xNumOfOverflows>
 a04:	8f 5f       	subi	r24, 0xFF	; 255
 a06:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <xNumOfOverflows>
 a0a:	11 de       	rcall	.-990    	; 0x62e <prvResetNextTaskUnblockTime>
 a0c:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <xNextTaskUnblockTime>
 a10:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 a14:	e8 16       	cp	r14, r24
 a16:	f9 06       	cpc	r15, r25
 a18:	10 f4       	brcc	.+4      	; 0xa1e <xTaskIncrementTick+0x72>
 a1a:	d1 2c       	mov	r13, r1
 a1c:	50 c0       	rjmp	.+160    	; 0xabe <xTaskIncrementTick+0x112>
 a1e:	d1 2c       	mov	r13, r1
 a20:	cc 24       	eor	r12, r12
 a22:	c3 94       	inc	r12
 a24:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <pxDelayedTaskList>
 a28:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <pxDelayedTaskList+0x1>
 a2c:	80 81       	ld	r24, Z
 a2e:	81 11       	cpse	r24, r1
 a30:	07 c0       	rjmp	.+14     	; 0xa40 <xTaskIncrementTick+0x94>
 a32:	8f ef       	ldi	r24, 0xFF	; 255
 a34:	9f ef       	ldi	r25, 0xFF	; 255
 a36:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 a3a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
 a3e:	3f c0       	rjmp	.+126    	; 0xabe <xTaskIncrementTick+0x112>
 a40:	e0 91 15 07 	lds	r30, 0x0715	; 0x800715 <pxDelayedTaskList>
 a44:	f0 91 16 07 	lds	r31, 0x0716	; 0x800716 <pxDelayedTaskList+0x1>
 a48:	05 80       	ldd	r0, Z+5	; 0x05
 a4a:	f6 81       	ldd	r31, Z+6	; 0x06
 a4c:	e0 2d       	mov	r30, r0
 a4e:	c6 81       	ldd	r28, Z+6	; 0x06
 a50:	d7 81       	ldd	r29, Z+7	; 0x07
 a52:	8a 81       	ldd	r24, Y+2	; 0x02
 a54:	9b 81       	ldd	r25, Y+3	; 0x03
 a56:	e8 16       	cp	r14, r24
 a58:	f9 06       	cpc	r15, r25
 a5a:	28 f4       	brcc	.+10     	; 0xa66 <xTaskIncrementTick+0xba>
 a5c:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <xNextTaskUnblockTime+0x1>
 a60:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <xNextTaskUnblockTime>
 a64:	2c c0       	rjmp	.+88     	; 0xabe <xTaskIncrementTick+0x112>
 a66:	8e 01       	movw	r16, r28
 a68:	0e 5f       	subi	r16, 0xFE	; 254
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	c8 01       	movw	r24, r16
 a6e:	c4 db       	rcall	.-2168   	; 0x1f8 <uxListRemove>
 a70:	8c 89       	ldd	r24, Y+20	; 0x14
 a72:	9d 89       	ldd	r25, Y+21	; 0x15
 a74:	89 2b       	or	r24, r25
 a76:	19 f0       	breq	.+6      	; 0xa7e <xTaskIncrementTick+0xd2>
 a78:	ce 01       	movw	r24, r28
 a7a:	0c 96       	adiw	r24, 0x0c	; 12
 a7c:	bd db       	rcall	.-2182   	; 0x1f8 <uxListRemove>
 a7e:	8e 89       	ldd	r24, Y+22	; 0x16
 a80:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 a84:	98 17       	cp	r25, r24
 a86:	10 f4       	brcc	.+4      	; 0xa8c <xTaskIncrementTick+0xe0>
 a88:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxTopReadyPriority>
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	9c 01       	movw	r18, r24
 a90:	22 0f       	add	r18, r18
 a92:	33 1f       	adc	r19, r19
 a94:	22 0f       	add	r18, r18
 a96:	33 1f       	adc	r19, r19
 a98:	22 0f       	add	r18, r18
 a9a:	33 1f       	adc	r19, r19
 a9c:	82 0f       	add	r24, r18
 a9e:	93 1f       	adc	r25, r19
 aa0:	b8 01       	movw	r22, r16
 aa2:	87 5d       	subi	r24, 0xD7	; 215
 aa4:	98 4f       	sbci	r25, 0xF8	; 248
 aa6:	56 db       	rcall	.-2388   	; 0x154 <vListInsertEnd>
 aa8:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxCurrentTCB>
 aac:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 ab0:	9e 89       	ldd	r25, Y+22	; 0x16
 ab2:	86 89       	ldd	r24, Z+22	; 0x16
 ab4:	98 17       	cp	r25, r24
 ab6:	08 f4       	brcc	.+2      	; 0xaba <xTaskIncrementTick+0x10e>
 ab8:	b5 cf       	rjmp	.-150    	; 0xa24 <xTaskIncrementTick+0x78>
 aba:	dc 2c       	mov	r13, r12
 abc:	b3 cf       	rjmp	.-154    	; 0xa24 <xTaskIncrementTick+0x78>
 abe:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxCurrentTCB>
 ac2:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 ac6:	86 89       	ldd	r24, Z+22	; 0x16
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	fc 01       	movw	r30, r24
 acc:	ee 0f       	add	r30, r30
 ace:	ff 1f       	adc	r31, r31
 ad0:	ee 0f       	add	r30, r30
 ad2:	ff 1f       	adc	r31, r31
 ad4:	ee 0f       	add	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	8e 0f       	add	r24, r30
 ada:	9f 1f       	adc	r25, r31
 adc:	fc 01       	movw	r30, r24
 ade:	e7 5d       	subi	r30, 0xD7	; 215
 ae0:	f8 4f       	sbci	r31, 0xF8	; 248
 ae2:	80 81       	ld	r24, Z
 ae4:	82 30       	cpi	r24, 0x02	; 2
 ae6:	48 f0       	brcs	.+18     	; 0xafa <xTaskIncrementTick+0x14e>
 ae8:	dd 24       	eor	r13, r13
 aea:	d3 94       	inc	r13
 aec:	06 c0       	rjmp	.+12     	; 0xafa <xTaskIncrementTick+0x14e>
 aee:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <uxPendedTicks>
 af2:	8f 5f       	subi	r24, 0xFF	; 255
 af4:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxPendedTicks>
 af8:	d1 2c       	mov	r13, r1
 afa:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xYieldPending>
 afe:	88 23       	and	r24, r24
 b00:	11 f0       	breq	.+4      	; 0xb06 <xTaskIncrementTick+0x15a>
 b02:	dd 24       	eor	r13, r13
 b04:	d3 94       	inc	r13
 b06:	8d 2d       	mov	r24, r13
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	1f 91       	pop	r17
 b0e:	0f 91       	pop	r16
 b10:	ff 90       	pop	r15
 b12:	ef 90       	pop	r14
 b14:	df 90       	pop	r13
 b16:	cf 90       	pop	r12
 b18:	08 95       	ret

00000b1a <xTaskResumeAll>:
 b1a:	df 92       	push	r13
 b1c:	ef 92       	push	r14
 b1e:	ff 92       	push	r15
 b20:	0f 93       	push	r16
 b22:	1f 93       	push	r17
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	f8 94       	cli
 b2c:	0f 92       	push	r0
 b2e:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 b32:	81 50       	subi	r24, 0x01	; 1
 b34:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <uxSchedulerSuspended>
 b38:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 b3c:	81 11       	cpse	r24, r1
 b3e:	59 c0       	rjmp	.+178    	; 0xbf2 <xTaskResumeAll+0xd8>
 b40:	80 91 ff 06 	lds	r24, 0x06FF	; 0x8006ff <uxCurrentNumberOfTasks>
 b44:	81 11       	cpse	r24, r1
 b46:	30 c0       	rjmp	.+96     	; 0xba8 <xTaskResumeAll+0x8e>
 b48:	57 c0       	rjmp	.+174    	; 0xbf8 <xTaskResumeAll+0xde>
 b4a:	d7 01       	movw	r26, r14
 b4c:	15 96       	adiw	r26, 0x05	; 5
 b4e:	ed 91       	ld	r30, X+
 b50:	fc 91       	ld	r31, X
 b52:	16 97       	sbiw	r26, 0x06	; 6
 b54:	c6 81       	ldd	r28, Z+6	; 0x06
 b56:	d7 81       	ldd	r29, Z+7	; 0x07
 b58:	ce 01       	movw	r24, r28
 b5a:	0c 96       	adiw	r24, 0x0c	; 12
 b5c:	4d db       	rcall	.-2406   	; 0x1f8 <uxListRemove>
 b5e:	8e 01       	movw	r16, r28
 b60:	0e 5f       	subi	r16, 0xFE	; 254
 b62:	1f 4f       	sbci	r17, 0xFF	; 255
 b64:	c8 01       	movw	r24, r16
 b66:	48 db       	rcall	.-2416   	; 0x1f8 <uxListRemove>
 b68:	8e 89       	ldd	r24, Y+22	; 0x16
 b6a:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 b6e:	98 17       	cp	r25, r24
 b70:	10 f4       	brcc	.+4      	; 0xb76 <xTaskResumeAll+0x5c>
 b72:	80 93 fc 06 	sts	0x06FC, r24	; 0x8006fc <uxTopReadyPriority>
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	9c 01       	movw	r18, r24
 b7a:	22 0f       	add	r18, r18
 b7c:	33 1f       	adc	r19, r19
 b7e:	22 0f       	add	r18, r18
 b80:	33 1f       	adc	r19, r19
 b82:	22 0f       	add	r18, r18
 b84:	33 1f       	adc	r19, r19
 b86:	82 0f       	add	r24, r18
 b88:	93 1f       	adc	r25, r19
 b8a:	b8 01       	movw	r22, r16
 b8c:	87 5d       	subi	r24, 0xD7	; 215
 b8e:	98 4f       	sbci	r25, 0xF8	; 248
 b90:	e1 da       	rcall	.-2622   	; 0x154 <vListInsertEnd>
 b92:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pxCurrentTCB>
 b96:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pxCurrentTCB+0x1>
 b9a:	9e 89       	ldd	r25, Y+22	; 0x16
 b9c:	86 89       	ldd	r24, Z+22	; 0x16
 b9e:	98 17       	cp	r25, r24
 ba0:	68 f0       	brcs	.+26     	; 0xbbc <xTaskResumeAll+0xa2>
 ba2:	d0 92 f9 06 	sts	0x06F9, r13	; 0x8006f9 <xYieldPending>
 ba6:	0a c0       	rjmp	.+20     	; 0xbbc <xTaskResumeAll+0xa2>
 ba8:	c0 e0       	ldi	r28, 0x00	; 0
 baa:	d0 e0       	ldi	r29, 0x00	; 0
 bac:	0f 2e       	mov	r0, r31
 bae:	fa e0       	ldi	r31, 0x0A	; 10
 bb0:	ef 2e       	mov	r14, r31
 bb2:	f7 e0       	ldi	r31, 0x07	; 7
 bb4:	ff 2e       	mov	r15, r31
 bb6:	f0 2d       	mov	r31, r0
 bb8:	dd 24       	eor	r13, r13
 bba:	d3 94       	inc	r13
 bbc:	f7 01       	movw	r30, r14
 bbe:	80 81       	ld	r24, Z
 bc0:	81 11       	cpse	r24, r1
 bc2:	c3 cf       	rjmp	.-122    	; 0xb4a <xTaskResumeAll+0x30>
 bc4:	cd 2b       	or	r28, r29
 bc6:	09 f0       	breq	.+2      	; 0xbca <xTaskResumeAll+0xb0>
 bc8:	32 dd       	rcall	.-1436   	; 0x62e <prvResetNextTaskUnblockTime>
 bca:	c0 91 fa 06 	lds	r28, 0x06FA	; 0x8006fa <uxPendedTicks>
 bce:	cc 23       	and	r28, r28
 bd0:	49 f0       	breq	.+18     	; 0xbe4 <xTaskResumeAll+0xca>
 bd2:	d1 e0       	ldi	r29, 0x01	; 1
 bd4:	eb de       	rcall	.-554    	; 0x9ac <xTaskIncrementTick>
 bd6:	81 11       	cpse	r24, r1
 bd8:	d0 93 f9 06 	sts	0x06F9, r29	; 0x8006f9 <xYieldPending>
 bdc:	c1 50       	subi	r28, 0x01	; 1
 bde:	d1 f7       	brne	.-12     	; 0xbd4 <xTaskResumeAll+0xba>
 be0:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <uxPendedTicks>
 be4:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xYieldPending>
 be8:	88 23       	and	r24, r24
 bea:	29 f0       	breq	.+10     	; 0xbf6 <xTaskResumeAll+0xdc>
 bec:	6c dc       	rcall	.-1832   	; 0x4c6 <vPortYield>
 bee:	81 e0       	ldi	r24, 0x01	; 1
 bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <xTaskResumeAll+0xde>
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <xTaskResumeAll+0xde>
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	0f 90       	pop	r0
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	df 91       	pop	r29
 bfe:	cf 91       	pop	r28
 c00:	1f 91       	pop	r17
 c02:	0f 91       	pop	r16
 c04:	ff 90       	pop	r15
 c06:	ef 90       	pop	r14
 c08:	df 90       	pop	r13
 c0a:	08 95       	ret

00000c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 c0c:	cf 93       	push	r28
 c0e:	df 93       	push	r29
 c10:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 c12:	89 2b       	or	r24, r25
 c14:	39 f0       	breq	.+14     	; 0xc24 <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 c16:	c4 de       	rcall	.-632    	; 0x9a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 c18:	60 e0       	ldi	r22, 0x00	; 0
 c1a:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 c1c:	5b dd       	rcall	.-1354   	; 0x6d4 <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c1e:	7d df       	rcall	.-262    	; 0xb1a <xTaskResumeAll>
 c20:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 c22:	01 c0       	rjmp	.+2      	; 0xc26 <vTaskDelay+0x1a>
 c24:	50 dc       	rcall	.-1888   	; 0x4c6 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 c26:	df 91       	pop	r29
 c28:	cf 91       	pop	r28
 c2a:	08 95       	ret

00000c2c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 c2c:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <uxSchedulerSuspended>
 c30:	88 23       	and	r24, r24
 c32:	21 f0       	breq	.+8      	; 0xc3c <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 c34:	81 e0       	ldi	r24, 0x01	; 1
 c36:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xYieldPending>
 c3a:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 c3c:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 c40:	20 91 fc 06 	lds	r18, 0x06FC	; 0x8006fc <uxTopReadyPriority>
 c44:	82 2f       	mov	r24, r18
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	fc 01       	movw	r30, r24
 c4a:	ee 0f       	add	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	ee 0f       	add	r30, r30
 c50:	ff 1f       	adc	r31, r31
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	e8 0f       	add	r30, r24
 c58:	f9 1f       	adc	r31, r25
 c5a:	e7 5d       	subi	r30, 0xD7	; 215
 c5c:	f8 4f       	sbci	r31, 0xF8	; 248
 c5e:	30 81       	ld	r19, Z
 c60:	31 11       	cpse	r19, r1
 c62:	11 c0       	rjmp	.+34     	; 0xc86 <vTaskSwitchContext+0x5a>
 c64:	21 50       	subi	r18, 0x01	; 1
 c66:	82 2f       	mov	r24, r18
 c68:	90 e0       	ldi	r25, 0x00	; 0
 c6a:	fc 01       	movw	r30, r24
 c6c:	ee 0f       	add	r30, r30
 c6e:	ff 1f       	adc	r31, r31
 c70:	ee 0f       	add	r30, r30
 c72:	ff 1f       	adc	r31, r31
 c74:	ee 0f       	add	r30, r30
 c76:	ff 1f       	adc	r31, r31
 c78:	e8 0f       	add	r30, r24
 c7a:	f9 1f       	adc	r31, r25
 c7c:	e7 5d       	subi	r30, 0xD7	; 215
 c7e:	f8 4f       	sbci	r31, 0xF8	; 248
 c80:	30 81       	ld	r19, Z
 c82:	33 23       	and	r19, r19
 c84:	79 f3       	breq	.-34     	; 0xc64 <vTaskSwitchContext+0x38>
 c86:	ac 01       	movw	r20, r24
 c88:	44 0f       	add	r20, r20
 c8a:	55 1f       	adc	r21, r21
 c8c:	44 0f       	add	r20, r20
 c8e:	55 1f       	adc	r21, r21
 c90:	44 0f       	add	r20, r20
 c92:	55 1f       	adc	r21, r21
 c94:	48 0f       	add	r20, r24
 c96:	59 1f       	adc	r21, r25
 c98:	da 01       	movw	r26, r20
 c9a:	a7 5d       	subi	r26, 0xD7	; 215
 c9c:	b8 4f       	sbci	r27, 0xF8	; 248
 c9e:	11 96       	adiw	r26, 0x01	; 1
 ca0:	ed 91       	ld	r30, X+
 ca2:	fc 91       	ld	r31, X
 ca4:	12 97       	sbiw	r26, 0x02	; 2
 ca6:	02 80       	ldd	r0, Z+2	; 0x02
 ca8:	f3 81       	ldd	r31, Z+3	; 0x03
 caa:	e0 2d       	mov	r30, r0
 cac:	12 96       	adiw	r26, 0x02	; 2
 cae:	fc 93       	st	X, r31
 cb0:	ee 93       	st	-X, r30
 cb2:	11 97       	sbiw	r26, 0x01	; 1
 cb4:	44 5d       	subi	r20, 0xD4	; 212
 cb6:	58 4f       	sbci	r21, 0xF8	; 248
 cb8:	e4 17       	cp	r30, r20
 cba:	f5 07       	cpc	r31, r21
 cbc:	29 f4       	brne	.+10     	; 0xcc8 <vTaskSwitchContext+0x9c>
 cbe:	42 81       	ldd	r20, Z+2	; 0x02
 cc0:	53 81       	ldd	r21, Z+3	; 0x03
 cc2:	fd 01       	movw	r30, r26
 cc4:	52 83       	std	Z+2, r21	; 0x02
 cc6:	41 83       	std	Z+1, r20	; 0x01
 cc8:	fc 01       	movw	r30, r24
 cca:	ee 0f       	add	r30, r30
 ccc:	ff 1f       	adc	r31, r31
 cce:	ee 0f       	add	r30, r30
 cd0:	ff 1f       	adc	r31, r31
 cd2:	ee 0f       	add	r30, r30
 cd4:	ff 1f       	adc	r31, r31
 cd6:	8e 0f       	add	r24, r30
 cd8:	9f 1f       	adc	r25, r31
 cda:	fc 01       	movw	r30, r24
 cdc:	e7 5d       	subi	r30, 0xD7	; 215
 cde:	f8 4f       	sbci	r31, 0xF8	; 248
 ce0:	01 80       	ldd	r0, Z+1	; 0x01
 ce2:	f2 81       	ldd	r31, Z+2	; 0x02
 ce4:	e0 2d       	mov	r30, r0
 ce6:	86 81       	ldd	r24, Z+6	; 0x06
 ce8:	97 81       	ldd	r25, Z+7	; 0x07
 cea:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <pxCurrentTCB+0x1>
 cee:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <pxCurrentTCB>
 cf2:	20 93 fc 06 	sts	0x06FC, r18	; 0x8006fc <uxTopReadyPriority>
 cf6:	08 95       	ret

00000cf8 <_exit>:
 cf8:	f8 94       	cli

00000cfa <__stop_program>:
 cfa:	ff cf       	rjmp	.-2      	; 0xcfa <__stop_program>
