
moh008_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c40  00000cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063e  00800110  00800110  00000ce4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028a5  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef2  00000000  00000000  00003811  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017f2  00000000  00000000  00004703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  00005ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f4c  00000000  00000000  000064ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ef4  00000000  00000000  000073f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  000092ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c2       	rjmp	.+1336   	; 0x56e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f3 d0       	rcall	.+486    	; 0x2aa <main>
  c4:	bb c5       	rjmp	.+2934   	; 0xc3c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
  ce:	0a d4       	rcall	.+2068   	; 0x8e4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
  d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
  d8:	89 2b       	or	r24, r25
  da:	31 f4       	brne	.+12     	; 0xe8 <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  dc:	85 e1       	ldi	r24, 0x15	; 21
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
  e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  e8:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <xNextFreeByte>
  ec:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <xNextFreeByte+0x1>
  f0:	c9 01       	movw	r24, r18
  f2:	8c 0f       	add	r24, r28
  f4:	9d 1f       	adc	r25, r29
  f6:	8b 3d       	cpi	r24, 0xDB	; 219
  f8:	45 e0       	ldi	r20, 0x05	; 5
  fa:	94 07       	cpc	r25, r20
  fc:	70 f4       	brcc	.+28     	; 0x11a <pvPortMalloc+0x52>
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	70 f4       	brcc	.+28     	; 0x120 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 104:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 108:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	c2 0f       	add	r28, r18
 10e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
 110:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <xNextFreeByte+0x1>
 114:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <xNextFreeByte>
 118:	05 c0       	rjmp	.+10     	; 0x124 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
 11a:	c0 e0       	ldi	r28, 0x00	; 0
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <pvPortMalloc+0x5c>
 120:	c0 e0       	ldi	r28, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 122:	d0 e0       	ldi	r29, 0x00	; 0
 124:	9c d4       	rcall	.+2360   	; 0xa5e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
 126:	ce 01       	movw	r24, r28
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 12e:	08 95       	ret

00000130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 130:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 132:	03 96       	adiw	r24, 0x03	; 3
 134:	92 83       	std	Z+2, r25	; 0x02
 136:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	3f ef       	ldi	r19, 0xFF	; 255
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 140:	96 83       	std	Z+6, r25	; 0x06
 142:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 144:	90 87       	std	Z+8, r25	; 0x08
 146:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 148:	10 82       	st	Z, r1
 14a:	08 95       	ret

0000014c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 14c:	fc 01       	movw	r30, r24
 14e:	11 86       	std	Z+9, r1	; 0x09
 150:	10 86       	std	Z+8, r1	; 0x08
 152:	08 95       	ret

00000154 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	9c 01       	movw	r18, r24
 15a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
 15c:	dc 01       	movw	r26, r24
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	cd 91       	ld	r28, X+
 162:	dc 91       	ld	r29, X
 164:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 166:	d3 83       	std	Z+3, r29	; 0x03
 168:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 16a:	8c 81       	ldd	r24, Y+4	; 0x04
 16c:	9d 81       	ldd	r25, Y+5	; 0x05
 16e:	95 83       	std	Z+5, r25	; 0x05
 170:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	9d 81       	ldd	r25, Y+5	; 0x05
 176:	dc 01       	movw	r26, r24
 178:	13 96       	adiw	r26, 0x03	; 3
 17a:	7c 93       	st	X, r23
 17c:	6e 93       	st	-X, r22
 17e:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 184:	31 87       	std	Z+9, r19	; 0x09
 186:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
 188:	f9 01       	movw	r30, r18
 18a:	80 81       	ld	r24, Z
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 83       	st	Z, r24
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 19c:	48 81       	ld	r20, Y
 19e:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 1a0:	4f 3f       	cpi	r20, 0xFF	; 255
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	52 07       	cpc	r21, r18
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 1a8:	fc 01       	movw	r30, r24
 1aa:	a7 81       	ldd	r26, Z+7	; 0x07
 1ac:	b0 85       	ldd	r27, Z+8	; 0x08
 1ae:	0d c0       	rjmp	.+26     	; 0x1ca <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 1b0:	dc 01       	movw	r26, r24
 1b2:	13 96       	adiw	r26, 0x03	; 3
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <vListInsert+0x22>
 1b6:	df 01       	movw	r26, r30
 1b8:	12 96       	adiw	r26, 0x02	; 2
 1ba:	ed 91       	ld	r30, X+
 1bc:	fc 91       	ld	r31, X
 1be:	13 97       	sbiw	r26, 0x03	; 3
 1c0:	20 81       	ld	r18, Z
 1c2:	31 81       	ldd	r19, Z+1	; 0x01
 1c4:	42 17       	cp	r20, r18
 1c6:	53 07       	cpc	r21, r19
 1c8:	b0 f7       	brcc	.-20     	; 0x1b6 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1ca:	12 96       	adiw	r26, 0x02	; 2
 1cc:	ed 91       	ld	r30, X+
 1ce:	fc 91       	ld	r31, X
 1d0:	13 97       	sbiw	r26, 0x03	; 3
 1d2:	fb 83       	std	Y+3, r31	; 0x03
 1d4:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 1d6:	d5 83       	std	Z+5, r29	; 0x05
 1d8:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
 1da:	bd 83       	std	Y+5, r27	; 0x05
 1dc:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
 1de:	13 96       	adiw	r26, 0x03	; 3
 1e0:	dc 93       	st	X, r29
 1e2:	ce 93       	st	-X, r28
 1e4:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 1e6:	99 87       	std	Y+9, r25	; 0x09
 1e8:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 81       	ld	r18, Z
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	20 83       	st	Z, r18
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 1fe:	a0 85       	ldd	r26, Z+8	; 0x08
 200:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 202:	c2 81       	ldd	r28, Z+2	; 0x02
 204:	d3 81       	ldd	r29, Z+3	; 0x03
 206:	84 81       	ldd	r24, Z+4	; 0x04
 208:	95 81       	ldd	r25, Z+5	; 0x05
 20a:	9d 83       	std	Y+5, r25	; 0x05
 20c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	c4 81       	ldd	r28, Z+4	; 0x04
 210:	d5 81       	ldd	r29, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	9b 83       	std	Y+3, r25	; 0x03
 218:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	12 97       	sbiw	r26, 0x02	; 2
 222:	e8 17       	cp	r30, r24
 224:	f9 07       	cpc	r31, r25
 226:	31 f4       	brne	.+12     	; 0x234 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:	84 81       	ldd	r24, Z+4	; 0x04
 22a:	95 81       	ldd	r25, Z+5	; 0x05
 22c:	12 96       	adiw	r26, 0x02	; 2
 22e:	9c 93       	st	X, r25
 230:	8e 93       	st	-X, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 234:	11 86       	std	Z+9, r1	; 0x09
 236:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 238:	8c 91       	ld	r24, X
 23a:	81 50       	subi	r24, 0x01	; 1
 23c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
 23e:	8c 91       	ld	r24, X
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LEDS_Tick>:
	led_state = INIT;
}

void LEDS_Tick(){
	//Actions
	switch(led_state){
 246:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 24a:	88 23       	and	r24, r24
 24c:	19 f0       	breq	.+6      	; 0x254 <LEDS_Tick+0xe>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	19 f0       	breq	.+6      	; 0x258 <LEDS_Tick+0x12>
 252:	05 c0       	rjmp	.+10     	; 0x25e <LEDS_Tick+0x18>
		case INIT:
		PORTD = 0x00;
 254:	1b b8       	out	0x0b, r1	; 11
		break;
 256:	04 c0       	rjmp	.+8      	; 0x260 <LEDS_Tick+0x1a>
		case L0:
		PORTD = 0x15;
 258:	85 e1       	ldi	r24, 0x15	; 21
 25a:	8b b9       	out	0x0b, r24	; 11
		break;
 25c:	01 c0       	rjmp	.+2      	; 0x260 <LEDS_Tick+0x1a>
		case L7:
		PORTD = 128;
		break;
		*/
		default:
		PORTD = 0;
 25e:	1b b8       	out	0x0b, r1	; 11
		break;
	}
	//Transitions
	switch(led_state){
 260:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <led_state>
 264:	88 23       	and	r24, r24
 266:	19 f0       	breq	.+6      	; 0x26e <LEDS_Tick+0x28>
		case INIT:
		led_state = L0;
		break;
		case L0:
		led_state = INIT;
 268:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
 26c:	08 95       	ret
		break;
	}
	//Transitions
	switch(led_state){
		case INIT:
		led_state = L0;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <led_state>
 274:	08 95       	ret

00000276 <LedSecTask>:
#include "task.h"
#include "croutine.h"
enum LEDState {INIT,L0/*L1,L2,L3,L4,L5,L6,L7*/} led_state;

void LEDS_Init(){
	led_state = INIT;
 276:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <led_state>
}

void LedSecTask() {
	LEDS_Init();
	for(;;) {
		LEDS_Tick();
 27a:	e5 df       	rcall	.-54     	; 0x246 <LEDS_Tick>
		vTaskDelay(1000);
 27c:	88 ee       	ldi	r24, 0xE8	; 232
 27e:	93 e0       	ldi	r25, 0x03	; 3
 280:	67 d4       	rcall	.+2254   	; 0xb50 <vTaskDelay>
 282:	fb cf       	rjmp	.-10     	; 0x27a <LedSecTask+0x4>

00000284 <StartSecPulse>:
	}
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
	xTaskCreate(LedSecTask,
 28a:	e1 2c       	mov	r14, r1
 28c:	f1 2c       	mov	r15, r1
 28e:	08 2f       	mov	r16, r24
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	45 e5       	ldi	r20, 0x55	; 85
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	71 e0       	ldi	r23, 0x01	; 1
 29c:	8b e3       	ldi	r24, 0x3B	; 59
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	fc d1       	rcall	.+1016   	; 0x69a <xTaskCreate>
	(signed portCHAR *)"LedSecTask",
	configMINIMAL_STACK_SIZE,
	NULL,
	Priority,
	NULL );
}
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	ef 90       	pop	r14
 2a8:	08 95       	ret

000002aa <main>:

int main(void) {
	DDRA = 0x00; PORTA=0xFF;
 2aa:	11 b8       	out	0x01, r1	; 1
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF;
 2b0:	8a b9       	out	0x0a, r24	; 10
	//Start Tasks
	StartSecPulse(1);
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	e7 df       	rcall	.-50     	; 0x284 <StartSecPulse>
	//RunSchedular
	vTaskStartScheduler();
 2b6:	ee d2       	rcall	.+1500   	; 0x894 <vTaskStartScheduler>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	08 95       	ret

000002be <pxPortInitialiseStack>:
 2be:	31 e1       	ldi	r19, 0x11	; 17
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 2c0:	fc 01       	movw	r30, r24
 2c2:	30 83       	st	Z, r19
 2c4:	31 97       	sbiw	r30, 0x01	; 1
 2c6:	22 e2       	ldi	r18, 0x22	; 34
 2c8:	20 83       	st	Z, r18
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	a3 e3       	ldi	r26, 0x33	; 51
 2ce:	a0 83       	st	Z, r26
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	60 83       	st	Z, r22
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	70 83       	st	Z, r23
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	10 82       	st	Z, r1
 2dc:	31 97       	sbiw	r30, 0x01	; 1
 2de:	60 e8       	ldi	r22, 0x80	; 128
 2e0:	60 83       	st	Z, r22
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	10 82       	st	Z, r1
 2e6:	31 97       	sbiw	r30, 0x01	; 1
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	60 83       	st	Z, r22
 2ec:	31 97       	sbiw	r30, 0x01	; 1
 2ee:	63 e0       	ldi	r22, 0x03	; 3
 2f0:	60 83       	st	Z, r22
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	60 83       	st	Z, r22
 2f8:	31 97       	sbiw	r30, 0x01	; 1
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	60 83       	st	Z, r22
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	66 e0       	ldi	r22, 0x06	; 6
 302:	60 83       	st	Z, r22
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	60 83       	st	Z, r22
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	68 e0       	ldi	r22, 0x08	; 8
 30e:	60 83       	st	Z, r22
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	69 e0       	ldi	r22, 0x09	; 9
 314:	60 83       	st	Z, r22
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	60 e1       	ldi	r22, 0x10	; 16
 31a:	60 83       	st	Z, r22
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	30 83       	st	Z, r19
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	32 e1       	ldi	r19, 0x12	; 18
 324:	30 83       	st	Z, r19
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	33 e1       	ldi	r19, 0x13	; 19
 32a:	30 83       	st	Z, r19
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	34 e1       	ldi	r19, 0x14	; 20
 330:	30 83       	st	Z, r19
 332:	31 97       	sbiw	r30, 0x01	; 1
 334:	35 e1       	ldi	r19, 0x15	; 21
 336:	30 83       	st	Z, r19
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	36 e1       	ldi	r19, 0x16	; 22
 33c:	30 83       	st	Z, r19
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	37 e1       	ldi	r19, 0x17	; 23
 342:	30 83       	st	Z, r19
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	38 e1       	ldi	r19, 0x18	; 24
 348:	30 83       	st	Z, r19
 34a:	31 97       	sbiw	r30, 0x01	; 1
 34c:	39 e1       	ldi	r19, 0x19	; 25
 34e:	30 83       	st	Z, r19
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	30 e2       	ldi	r19, 0x20	; 32
 354:	30 83       	st	Z, r19
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	31 e2       	ldi	r19, 0x21	; 33
 35a:	30 83       	st	Z, r19
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	20 83       	st	Z, r18
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	23 e2       	ldi	r18, 0x23	; 35
 364:	20 83       	st	Z, r18
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	40 83       	st	Z, r20
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	50 83       	st	Z, r21
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	26 e2       	ldi	r18, 0x26	; 38
 372:	20 83       	st	Z, r18
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	27 e2       	ldi	r18, 0x27	; 39
 378:	20 83       	st	Z, r18
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	28 e2       	ldi	r18, 0x28	; 40
 37e:	20 83       	st	Z, r18
 380:	31 97       	sbiw	r30, 0x01	; 1
 382:	29 e2       	ldi	r18, 0x29	; 41
 384:	20 83       	st	Z, r18
 386:	31 97       	sbiw	r30, 0x01	; 1
 388:	20 e3       	ldi	r18, 0x30	; 48
 38a:	20 83       	st	Z, r18
 38c:	31 97       	sbiw	r30, 0x01	; 1
 38e:	21 e3       	ldi	r18, 0x31	; 49
 390:	20 83       	st	Z, r18
 392:	86 97       	sbiw	r24, 0x26	; 38
 394:	08 95       	ret

00000396 <xPortStartScheduler>:
 396:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 39a:	8c e7       	ldi	r24, 0x7C	; 124
 39c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 3a0:	8b e0       	ldi	r24, 0x0B	; 11
 3a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 3a6:	ef e6       	ldi	r30, 0x6F	; 111
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	80 83       	st	Z, r24
 3b0:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 3b4:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 3b8:	cd 91       	ld	r28, X+
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	dd 91       	ld	r29, X+
 3be:	de bf       	out	0x3e, r29	; 62
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	bf 90       	pop	r11
 3ea:	af 90       	pop	r10
 3ec:	9f 90       	pop	r9
 3ee:	8f 90       	pop	r8
 3f0:	7f 90       	pop	r7
 3f2:	6f 90       	pop	r6
 3f4:	5f 90       	pop	r5
 3f6:	4f 90       	pop	r4
 3f8:	3f 90       	pop	r3
 3fa:	2f 90       	pop	r2
 3fc:	1f 90       	pop	r1
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	08 95       	ret
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	08 95       	ret

0000040a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	0f 92       	push	r0
 412:	1f 92       	push	r1
 414:	11 24       	eor	r1, r1
 416:	2f 92       	push	r2
 418:	3f 92       	push	r3
 41a:	4f 92       	push	r4
 41c:	5f 92       	push	r5
 41e:	6f 92       	push	r6
 420:	7f 92       	push	r7
 422:	8f 92       	push	r8
 424:	9f 92       	push	r9
 426:	af 92       	push	r10
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	2f 93       	push	r18
 438:	3f 93       	push	r19
 43a:	4f 93       	push	r20
 43c:	5f 93       	push	r21
 43e:	6f 93       	push	r22
 440:	7f 93       	push	r23
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	af 93       	push	r26
 448:	bf 93       	push	r27
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
 452:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 456:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 45a:	0d b6       	in	r0, 0x3d	; 61
 45c:	0d 92       	st	X+, r0
 45e:	0e b6       	in	r0, 0x3e	; 62
 460:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 462:	86 d3       	rcall	.+1804   	; 0xb70 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 464:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 468:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 46c:	cd 91       	ld	r28, X+
 46e:	cd bf       	out	0x3d, r28	; 61
 470:	dd 91       	ld	r29, X+
 472:	de bf       	out	0x3e, r29	; 62
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	9f 90       	pop	r9
 4a2:	8f 90       	pop	r8
 4a4:	7f 90       	pop	r7
 4a6:	6f 90       	pop	r6
 4a8:	5f 90       	pop	r5
 4aa:	4f 90       	pop	r4
 4ac:	3f 90       	pop	r3
 4ae:	2f 90       	pop	r2
 4b0:	1f 90       	pop	r1
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4b8:	08 95       	ret

000004ba <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	0f 92       	push	r0
 4c2:	1f 92       	push	r1
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 92       	push	r2
 4c8:	3f 92       	push	r3
 4ca:	4f 92       	push	r4
 4cc:	5f 92       	push	r5
 4ce:	6f 92       	push	r6
 4d0:	7f 92       	push	r7
 4d2:	8f 92       	push	r8
 4d4:	9f 92       	push	r9
 4d6:	af 92       	push	r10
 4d8:	bf 92       	push	r11
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ef 93       	push	r30
 500:	ff 93       	push	r31
 502:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
 506:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 50a:	0d b6       	in	r0, 0x3d	; 61
 50c:	0d 92       	st	X+, r0
 50e:	0e b6       	in	r0, 0x3e	; 62
 510:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 512:	ee d1       	rcall	.+988    	; 0x8f0 <xTaskIncrementTick>
 514:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 516:	2c d3       	rcall	.+1624   	; 0xb70 <vTaskSwitchContext>
 518:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <pxCurrentTCB>
	}
	portRESTORE_CONTEXT();
 51c:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 520:	cd 91       	ld	r28, X+
 522:	cd bf       	out	0x3d, r28	; 61
 524:	dd 91       	ld	r29, X+
 526:	de bf       	out	0x3e, r29	; 62
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	bf 91       	pop	r27
 532:	af 91       	pop	r26
 534:	9f 91       	pop	r25
 536:	8f 91       	pop	r24
 538:	7f 91       	pop	r23
 53a:	6f 91       	pop	r22
 53c:	5f 91       	pop	r21
 53e:	4f 91       	pop	r20
 540:	3f 91       	pop	r19
 542:	2f 91       	pop	r18
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	bf 90       	pop	r11
 552:	af 90       	pop	r10
 554:	9f 90       	pop	r9
 556:	8f 90       	pop	r8
 558:	7f 90       	pop	r7
 55a:	6f 90       	pop	r6
 55c:	5f 90       	pop	r5
 55e:	4f 90       	pop	r4
 560:	3f 90       	pop	r3
 562:	2f 90       	pop	r2
 564:	1f 90       	pop	r1
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	08 95       	ret

0000056e <__vector_13>:

	asm volatile ( "ret" );
 56e:	a5 df       	rcall	.-182    	; 0x4ba <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 570:	18 95       	reti

00000572 <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 572:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 576:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 57a:	80 81       	ld	r24, Z
 57c:	81 11       	cpse	r24, r1
 57e:	07 c0       	rjmp	.+14     	; 0x58e <prvResetNextTaskUnblockTime+0x1c>
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	9f ef       	ldi	r25, 0xFF	; 255
 584:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 588:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 58c:	08 95       	ret
 58e:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 592:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 596:	05 80       	ldd	r0, Z+5	; 0x05
 598:	f6 81       	ldd	r31, Z+6	; 0x06
 59a:	e0 2d       	mov	r30, r0
 59c:	06 80       	ldd	r0, Z+6	; 0x06
 59e:	f7 81       	ldd	r31, Z+7	; 0x07
 5a0:	e0 2d       	mov	r30, r0
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	93 81       	ldd	r25, Z+3	; 0x03
 5a6:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 5aa:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 5ae:	08 95       	ret

000005b0 <prvIdleTask>:
 5b0:	0f ef       	ldi	r16, 0xFF	; 255
 5b2:	16 e0       	ldi	r17, 0x06	; 6
 5b4:	0f 2e       	mov	r0, r31
 5b6:	f7 e2       	ldi	r31, 0x27	; 39
 5b8:	ef 2e       	mov	r14, r31
 5ba:	f7 e0       	ldi	r31, 0x07	; 7
 5bc:	ff 2e       	mov	r15, r31
 5be:	f0 2d       	mov	r31, r0
 5c0:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5c4:	88 23       	and	r24, r24
 5c6:	11 f1       	breq	.+68     	; 0x60c <prvIdleTask+0x5c>
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	0f 92       	push	r0
 5ce:	d8 01       	movw	r26, r16
 5d0:	15 96       	adiw	r26, 0x05	; 5
 5d2:	ed 91       	ld	r30, X+
 5d4:	fc 91       	ld	r31, X
 5d6:	16 97       	sbiw	r26, 0x06	; 6
 5d8:	c6 81       	ldd	r28, Z+6	; 0x06
 5da:	d7 81       	ldd	r29, Z+7	; 0x07
 5dc:	ce 01       	movw	r24, r28
 5de:	02 96       	adiw	r24, 0x02	; 2
 5e0:	0b de       	rcall	.-1002   	; 0x1f8 <uxListRemove>
 5e2:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 5e6:	81 50       	subi	r24, 0x01	; 1
 5e8:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 5ec:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	8f 89       	ldd	r24, Y+23	; 0x17
 5fc:	98 8d       	ldd	r25, Y+24	; 0x18
 5fe:	97 dd       	rcall	.-1234   	; 0x12e <vPortFree>
 600:	ce 01       	movw	r24, r28
 602:	95 dd       	rcall	.-1238   	; 0x12e <vPortFree>
 604:	80 91 fe 06 	lds	r24, 0x06FE	; 0x8006fe <uxDeletedTasksWaitingCleanUp>
 608:	81 11       	cpse	r24, r1
 60a:	de cf       	rjmp	.-68     	; 0x5c8 <prvIdleTask+0x18>
 60c:	f7 01       	movw	r30, r14
 60e:	80 81       	ld	r24, Z
 610:	82 30       	cpi	r24, 0x02	; 2
 612:	b0 f2       	brcs	.-84     	; 0x5c0 <prvIdleTask+0x10>
 614:	fa de       	rcall	.-524    	; 0x40a <vPortYield>
 616:	d4 cf       	rjmp	.-88     	; 0x5c0 <prvIdleTask+0x10>

00000618 <prvAddCurrentTaskToDelayedList>:
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	ec 01       	movw	r28, r24
 622:	00 91 fb 06 	lds	r16, 0x06FB	; 0x8006fb <xTickCount>
 626:	10 91 fc 06 	lds	r17, 0x06FC	; 0x8006fc <xTickCount+0x1>
 62a:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 62e:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 632:	02 96       	adiw	r24, 0x02	; 2
 634:	e1 dd       	rcall	.-1086   	; 0x1f8 <uxListRemove>
 636:	c0 0f       	add	r28, r16
 638:	d1 1f       	adc	r29, r17
 63a:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 63e:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 642:	d3 83       	std	Z+3, r29	; 0x03
 644:	c2 83       	std	Z+2, r28	; 0x02
 646:	c0 17       	cp	r28, r16
 648:	d1 07       	cpc	r29, r17
 64a:	60 f4       	brcc	.+24     	; 0x664 <prvAddCurrentTaskToDelayedList+0x4c>
 64c:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 650:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 654:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 658:	90 91 12 07 	lds	r25, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 65c:	6e 5f       	subi	r22, 0xFE	; 254
 65e:	7f 4f       	sbci	r23, 0xFF	; 255
 660:	9a dd       	rcall	.-1228   	; 0x196 <vListInsert>
 662:	16 c0       	rjmp	.+44     	; 0x690 <prvAddCurrentTaskToDelayedList+0x78>
 664:	60 91 4b 07 	lds	r22, 0x074B	; 0x80074b <pxCurrentTCB>
 668:	70 91 4c 07 	lds	r23, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 66c:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 670:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 674:	6e 5f       	subi	r22, 0xFE	; 254
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8e dd       	rcall	.-1252   	; 0x196 <vListInsert>
 67a:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 67e:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 682:	c8 17       	cp	r28, r24
 684:	d9 07       	cpc	r29, r25
 686:	20 f4       	brcc	.+8      	; 0x690 <prvAddCurrentTaskToDelayedList+0x78>
 688:	d0 93 f4 06 	sts	0x06F4, r29	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 68c:	c0 93 f3 06 	sts	0x06F3, r28	; 0x8006f3 <xNextTaskUnblockTime>
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	08 95       	ret

0000069a <xTaskCreate>:
 69a:	4f 92       	push	r4
 69c:	5f 92       	push	r5
 69e:	6f 92       	push	r6
 6a0:	7f 92       	push	r7
 6a2:	8f 92       	push	r8
 6a4:	9f 92       	push	r9
 6a6:	af 92       	push	r10
 6a8:	bf 92       	push	r11
 6aa:	cf 92       	push	r12
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	4c 01       	movw	r8, r24
 6ba:	6b 01       	movw	r12, r22
 6bc:	5a 01       	movw	r10, r20
 6be:	29 01       	movw	r4, r18
 6c0:	ca 01       	movw	r24, r20
 6c2:	02 dd       	rcall	.-1532   	; 0xc8 <pvPortMalloc>
 6c4:	3c 01       	movw	r6, r24
 6c6:	89 2b       	or	r24, r25
 6c8:	09 f4       	brne	.+2      	; 0x6cc <xTaskCreate+0x32>
 6ca:	d3 c0       	rjmp	.+422    	; 0x872 <xTaskCreate+0x1d8>
 6cc:	86 e2       	ldi	r24, 0x26	; 38
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	fb dc       	rcall	.-1546   	; 0xc8 <pvPortMalloc>
 6d2:	ec 01       	movw	r28, r24
 6d4:	89 2b       	or	r24, r25
 6d6:	59 f0       	breq	.+22     	; 0x6ee <xTaskCreate+0x54>
 6d8:	78 8e       	std	Y+24, r7	; 0x18
 6da:	6f 8a       	std	Y+23, r6	; 0x17
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	a8 1a       	sub	r10, r24
 6e0:	b1 08       	sbc	r11, r1
 6e2:	a6 0c       	add	r10, r6
 6e4:	b7 1c       	adc	r11, r7
 6e6:	c1 14       	cp	r12, r1
 6e8:	d1 04       	cpc	r13, r1
 6ea:	21 f4       	brne	.+8      	; 0x6f4 <xTaskCreate+0x5a>
 6ec:	1f c0       	rjmp	.+62     	; 0x72c <xTaskCreate+0x92>
 6ee:	c3 01       	movw	r24, r6
 6f0:	1e dd       	rcall	.-1476   	; 0x12e <vPortFree>
 6f2:	bf c0       	rjmp	.+382    	; 0x872 <xTaskCreate+0x1d8>
 6f4:	d6 01       	movw	r26, r12
 6f6:	8c 91       	ld	r24, X
 6f8:	89 8f       	std	Y+25, r24	; 0x19
 6fa:	8c 91       	ld	r24, X
 6fc:	88 23       	and	r24, r24
 6fe:	a1 f0       	breq	.+40     	; 0x728 <xTaskCreate+0x8e>
 700:	ae 01       	movw	r20, r28
 702:	46 5e       	subi	r20, 0xE6	; 230
 704:	5f 4f       	sbci	r21, 0xFF	; 255
 706:	f6 01       	movw	r30, r12
 708:	31 96       	adiw	r30, 0x01	; 1
 70a:	b8 e0       	ldi	r27, 0x08	; 8
 70c:	cb 0e       	add	r12, r27
 70e:	d1 1c       	adc	r13, r1
 710:	cf 01       	movw	r24, r30
 712:	21 91       	ld	r18, Z+
 714:	da 01       	movw	r26, r20
 716:	2d 93       	st	X+, r18
 718:	ad 01       	movw	r20, r26
 71a:	dc 01       	movw	r26, r24
 71c:	8c 91       	ld	r24, X
 71e:	88 23       	and	r24, r24
 720:	19 f0       	breq	.+6      	; 0x728 <xTaskCreate+0x8e>
 722:	ec 15       	cp	r30, r12
 724:	fd 05       	cpc	r31, r13
 726:	a1 f7       	brne	.-24     	; 0x710 <xTaskCreate+0x76>
 728:	18 a2       	std	Y+32, r1	; 0x20
 72a:	01 c0       	rjmp	.+2      	; 0x72e <xTaskCreate+0x94>
 72c:	19 8e       	std	Y+25, r1	; 0x19
 72e:	04 30       	cpi	r16, 0x04	; 4
 730:	08 f0       	brcs	.+2      	; 0x734 <xTaskCreate+0x9a>
 732:	03 e0       	ldi	r16, 0x03	; 3
 734:	0e 8b       	std	Y+22, r16	; 0x16
 736:	6e 01       	movw	r12, r28
 738:	b2 e0       	ldi	r27, 0x02	; 2
 73a:	cb 0e       	add	r12, r27
 73c:	d1 1c       	adc	r13, r1
 73e:	c6 01       	movw	r24, r12
 740:	05 dd       	rcall	.-1526   	; 0x14c <vListInitialiseItem>
 742:	ce 01       	movw	r24, r28
 744:	0c 96       	adiw	r24, 0x0c	; 12
 746:	02 dd       	rcall	.-1532   	; 0x14c <vListInitialiseItem>
 748:	d9 87       	std	Y+9, r29	; 0x09
 74a:	c8 87       	std	Y+8, r28	; 0x08
 74c:	84 e0       	ldi	r24, 0x04	; 4
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	80 1b       	sub	r24, r16
 752:	91 09       	sbc	r25, r1
 754:	9d 87       	std	Y+13, r25	; 0x0d
 756:	8c 87       	std	Y+12, r24	; 0x0c
 758:	db 8b       	std	Y+19, r29	; 0x13
 75a:	ca 8b       	std	Y+18, r28	; 0x12
 75c:	19 a2       	std	Y+33, r1	; 0x21
 75e:	1a a2       	std	Y+34, r1	; 0x22
 760:	1b a2       	std	Y+35, r1	; 0x23
 762:	1c a2       	std	Y+36, r1	; 0x24
 764:	1d a2       	std	Y+37, r1	; 0x25
 766:	a2 01       	movw	r20, r4
 768:	b4 01       	movw	r22, r8
 76a:	c5 01       	movw	r24, r10
 76c:	a8 dd       	rcall	.-1200   	; 0x2be <pxPortInitialiseStack>
 76e:	99 83       	std	Y+1, r25	; 0x01
 770:	88 83       	st	Y, r24
 772:	e1 14       	cp	r14, r1
 774:	f1 04       	cpc	r15, r1
 776:	19 f0       	breq	.+6      	; 0x77e <xTaskCreate+0xe4>
 778:	f7 01       	movw	r30, r14
 77a:	d1 83       	std	Z+1, r29	; 0x01
 77c:	c0 83       	st	Z, r28
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	f8 94       	cli
 782:	0f 92       	push	r0
 784:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 788:	8f 5f       	subi	r24, 0xFF	; 255
 78a:	80 93 fd 06 	sts	0x06FD, r24	; 0x8006fd <uxCurrentNumberOfTasks>
 78e:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <pxCurrentTCB>
 792:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 796:	89 2b       	or	r24, r25
 798:	69 f5       	brne	.+90     	; 0x7f4 <xTaskCreate+0x15a>
 79a:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 79e:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 7a2:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	a9 f5       	brne	.+106    	; 0x814 <xTaskCreate+0x17a>
 7aa:	87 e2       	ldi	r24, 0x27	; 39
 7ac:	97 e0       	ldi	r25, 0x07	; 7
 7ae:	c0 dc       	rcall	.-1664   	; 0x130 <vListInitialise>
 7b0:	80 e3       	ldi	r24, 0x30	; 48
 7b2:	97 e0       	ldi	r25, 0x07	; 7
 7b4:	bd dc       	rcall	.-1670   	; 0x130 <vListInitialise>
 7b6:	89 e3       	ldi	r24, 0x39	; 57
 7b8:	97 e0       	ldi	r25, 0x07	; 7
 7ba:	ba dc       	rcall	.-1676   	; 0x130 <vListInitialise>
 7bc:	82 e4       	ldi	r24, 0x42	; 66
 7be:	97 e0       	ldi	r25, 0x07	; 7
 7c0:	b7 dc       	rcall	.-1682   	; 0x130 <vListInitialise>
 7c2:	8e e1       	ldi	r24, 0x1E	; 30
 7c4:	97 e0       	ldi	r25, 0x07	; 7
 7c6:	b4 dc       	rcall	.-1688   	; 0x130 <vListInitialise>
 7c8:	85 e1       	ldi	r24, 0x15	; 21
 7ca:	97 e0       	ldi	r25, 0x07	; 7
 7cc:	b1 dc       	rcall	.-1694   	; 0x130 <vListInitialise>
 7ce:	88 e0       	ldi	r24, 0x08	; 8
 7d0:	97 e0       	ldi	r25, 0x07	; 7
 7d2:	ae dc       	rcall	.-1700   	; 0x130 <vListInitialise>
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	96 e0       	ldi	r25, 0x06	; 6
 7d8:	ab dc       	rcall	.-1706   	; 0x130 <vListInitialise>
 7da:	8e e1       	ldi	r24, 0x1E	; 30
 7dc:	97 e0       	ldi	r25, 0x07	; 7
 7de:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <pxDelayedTaskList+0x1>
 7e2:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <pxDelayedTaskList>
 7e6:	85 e1       	ldi	r24, 0x15	; 21
 7e8:	97 e0       	ldi	r25, 0x07	; 7
 7ea:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 7ee:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 7f2:	10 c0       	rjmp	.+32     	; 0x814 <xTaskCreate+0x17a>
 7f4:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 7f8:	81 11       	cpse	r24, r1
 7fa:	0c c0       	rjmp	.+24     	; 0x814 <xTaskCreate+0x17a>
 7fc:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 800:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 804:	96 89       	ldd	r25, Z+22	; 0x16
 806:	8e 89       	ldd	r24, Y+22	; 0x16
 808:	89 17       	cp	r24, r25
 80a:	20 f0       	brcs	.+8      	; 0x814 <xTaskCreate+0x17a>
 80c:	d0 93 4c 07 	sts	0x074C, r29	; 0x80074c <pxCurrentTCB+0x1>
 810:	c0 93 4b 07 	sts	0x074B, r28	; 0x80074b <pxCurrentTCB>
 814:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <uxTaskNumber>
 818:	8f 5f       	subi	r24, 0xFF	; 255
 81a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <uxTaskNumber>
 81e:	8e 89       	ldd	r24, Y+22	; 0x16
 820:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 824:	98 17       	cp	r25, r24
 826:	10 f4       	brcc	.+4      	; 0x82c <xTaskCreate+0x192>
 828:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	9c 01       	movw	r18, r24
 830:	22 0f       	add	r18, r18
 832:	33 1f       	adc	r19, r19
 834:	22 0f       	add	r18, r18
 836:	33 1f       	adc	r19, r19
 838:	22 0f       	add	r18, r18
 83a:	33 1f       	adc	r19, r19
 83c:	82 0f       	add	r24, r18
 83e:	93 1f       	adc	r25, r19
 840:	b6 01       	movw	r22, r12
 842:	89 5d       	subi	r24, 0xD9	; 217
 844:	98 4f       	sbci	r25, 0xF8	; 248
 846:	86 dc       	rcall	.-1780   	; 0x154 <vListInsertEnd>
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <xSchedulerRunning>
 850:	88 23       	and	r24, r24
 852:	59 f0       	breq	.+22     	; 0x86a <xTaskCreate+0x1d0>
 854:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 858:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 85c:	96 89       	ldd	r25, Z+22	; 0x16
 85e:	8e 89       	ldd	r24, Y+22	; 0x16
 860:	98 17       	cp	r25, r24
 862:	28 f4       	brcc	.+10     	; 0x86e <xTaskCreate+0x1d4>
 864:	d2 dd       	rcall	.-1116   	; 0x40a <vPortYield>
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	05 c0       	rjmp	.+10     	; 0x874 <xTaskCreate+0x1da>
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	03 c0       	rjmp	.+6      	; 0x874 <xTaskCreate+0x1da>
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	01 c0       	rjmp	.+2      	; 0x874 <xTaskCreate+0x1da>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	0f 91       	pop	r16
 87a:	ff 90       	pop	r15
 87c:	ef 90       	pop	r14
 87e:	df 90       	pop	r13
 880:	cf 90       	pop	r12
 882:	bf 90       	pop	r11
 884:	af 90       	pop	r10
 886:	9f 90       	pop	r9
 888:	8f 90       	pop	r8
 88a:	7f 90       	pop	r7
 88c:	6f 90       	pop	r6
 88e:	5f 90       	pop	r5
 890:	4f 90       	pop	r4
 892:	08 95       	ret

00000894 <vTaskStartScheduler>:
 894:	ef 92       	push	r14
 896:	ff 92       	push	r15
 898:	0f 93       	push	r16
 89a:	0f 2e       	mov	r0, r31
 89c:	f1 ef       	ldi	r31, 0xF1	; 241
 89e:	ef 2e       	mov	r14, r31
 8a0:	f6 e0       	ldi	r31, 0x06	; 6
 8a2:	ff 2e       	mov	r15, r31
 8a4:	f0 2d       	mov	r31, r0
 8a6:	00 e0       	ldi	r16, 0x00	; 0
 8a8:	20 e0       	ldi	r18, 0x00	; 0
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	45 e5       	ldi	r20, 0x55	; 85
 8ae:	50 e0       	ldi	r21, 0x00	; 0
 8b0:	6b e0       	ldi	r22, 0x0B	; 11
 8b2:	71 e0       	ldi	r23, 0x01	; 1
 8b4:	88 ed       	ldi	r24, 0xD8	; 216
 8b6:	92 e0       	ldi	r25, 0x02	; 2
 8b8:	f0 de       	rcall	.-544    	; 0x69a <xTaskCreate>
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	79 f4       	brne	.+30     	; 0x8dc <vTaskStartScheduler+0x48>
 8be:	f8 94       	cli
 8c0:	8f ef       	ldi	r24, 0xFF	; 255
 8c2:	9f ef       	ldi	r25, 0xFF	; 255
 8c4:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 8c8:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <xSchedulerRunning>
 8d2:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <xTickCount+0x1>
 8d6:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <xTickCount>
 8da:	5d dd       	rcall	.-1350   	; 0x396 <xPortStartScheduler>
 8dc:	0f 91       	pop	r16
 8de:	ff 90       	pop	r15
 8e0:	ef 90       	pop	r14
 8e2:	08 95       	ret

000008e4 <vTaskSuspendAll>:
 8e4:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 8e8:	8f 5f       	subi	r24, 0xFF	; 255
 8ea:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 8ee:	08 95       	ret

000008f0 <xTaskIncrementTick>:
 8f0:	cf 92       	push	r12
 8f2:	df 92       	push	r13
 8f4:	ef 92       	push	r14
 8f6:	ff 92       	push	r15
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 904:	81 11       	cpse	r24, r1
 906:	95 c0       	rjmp	.+298    	; 0xa32 <xTaskIncrementTick+0x142>
 908:	e0 90 fb 06 	lds	r14, 0x06FB	; 0x8006fb <xTickCount>
 90c:	f0 90 fc 06 	lds	r15, 0x06FC	; 0x8006fc <xTickCount+0x1>
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	e8 1a       	sub	r14, r24
 914:	f8 0a       	sbc	r15, r24
 916:	f0 92 fc 06 	sts	0x06FC, r15	; 0x8006fc <xTickCount+0x1>
 91a:	e0 92 fb 06 	sts	0x06FB, r14	; 0x8006fb <xTickCount>
 91e:	e1 14       	cp	r14, r1
 920:	f1 04       	cpc	r15, r1
 922:	b1 f4       	brne	.+44     	; 0x950 <xTaskIncrementTick+0x60>
 924:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <pxDelayedTaskList>
 928:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 92c:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <pxOverflowDelayedTaskList>
 930:	30 91 12 07 	lds	r19, 0x0712	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 934:	30 93 14 07 	sts	0x0714, r19	; 0x800714 <pxDelayedTaskList+0x1>
 938:	20 93 13 07 	sts	0x0713, r18	; 0x800713 <pxDelayedTaskList>
 93c:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <pxOverflowDelayedTaskList+0x1>
 940:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <pxOverflowDelayedTaskList>
 944:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xNumOfOverflows>
 948:	8f 5f       	subi	r24, 0xFF	; 255
 94a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xNumOfOverflows>
 94e:	11 de       	rcall	.-990    	; 0x572 <prvResetNextTaskUnblockTime>
 950:	80 91 f3 06 	lds	r24, 0x06F3	; 0x8006f3 <xNextTaskUnblockTime>
 954:	90 91 f4 06 	lds	r25, 0x06F4	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 958:	e8 16       	cp	r14, r24
 95a:	f9 06       	cpc	r15, r25
 95c:	10 f4       	brcc	.+4      	; 0x962 <xTaskIncrementTick+0x72>
 95e:	d1 2c       	mov	r13, r1
 960:	50 c0       	rjmp	.+160    	; 0xa02 <xTaskIncrementTick+0x112>
 962:	d1 2c       	mov	r13, r1
 964:	cc 24       	eor	r12, r12
 966:	c3 94       	inc	r12
 968:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 96c:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 970:	80 81       	ld	r24, Z
 972:	81 11       	cpse	r24, r1
 974:	07 c0       	rjmp	.+14     	; 0x984 <xTaskIncrementTick+0x94>
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	9f ef       	ldi	r25, 0xFF	; 255
 97a:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 97e:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 982:	3f c0       	rjmp	.+126    	; 0xa02 <xTaskIncrementTick+0x112>
 984:	e0 91 13 07 	lds	r30, 0x0713	; 0x800713 <pxDelayedTaskList>
 988:	f0 91 14 07 	lds	r31, 0x0714	; 0x800714 <pxDelayedTaskList+0x1>
 98c:	05 80       	ldd	r0, Z+5	; 0x05
 98e:	f6 81       	ldd	r31, Z+6	; 0x06
 990:	e0 2d       	mov	r30, r0
 992:	c6 81       	ldd	r28, Z+6	; 0x06
 994:	d7 81       	ldd	r29, Z+7	; 0x07
 996:	8a 81       	ldd	r24, Y+2	; 0x02
 998:	9b 81       	ldd	r25, Y+3	; 0x03
 99a:	e8 16       	cp	r14, r24
 99c:	f9 06       	cpc	r15, r25
 99e:	28 f4       	brcc	.+10     	; 0x9aa <xTaskIncrementTick+0xba>
 9a0:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <xNextTaskUnblockTime+0x1>
 9a4:	80 93 f3 06 	sts	0x06F3, r24	; 0x8006f3 <xNextTaskUnblockTime>
 9a8:	2c c0       	rjmp	.+88     	; 0xa02 <xTaskIncrementTick+0x112>
 9aa:	8e 01       	movw	r16, r28
 9ac:	0e 5f       	subi	r16, 0xFE	; 254
 9ae:	1f 4f       	sbci	r17, 0xFF	; 255
 9b0:	c8 01       	movw	r24, r16
 9b2:	22 dc       	rcall	.-1980   	; 0x1f8 <uxListRemove>
 9b4:	8c 89       	ldd	r24, Y+20	; 0x14
 9b6:	9d 89       	ldd	r25, Y+21	; 0x15
 9b8:	89 2b       	or	r24, r25
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <xTaskIncrementTick+0xd2>
 9bc:	ce 01       	movw	r24, r28
 9be:	0c 96       	adiw	r24, 0x0c	; 12
 9c0:	1b dc       	rcall	.-1994   	; 0x1f8 <uxListRemove>
 9c2:	8e 89       	ldd	r24, Y+22	; 0x16
 9c4:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 9c8:	98 17       	cp	r25, r24
 9ca:	10 f4       	brcc	.+4      	; 0x9d0 <xTaskIncrementTick+0xe0>
 9cc:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	9c 01       	movw	r18, r24
 9d4:	22 0f       	add	r18, r18
 9d6:	33 1f       	adc	r19, r19
 9d8:	22 0f       	add	r18, r18
 9da:	33 1f       	adc	r19, r19
 9dc:	22 0f       	add	r18, r18
 9de:	33 1f       	adc	r19, r19
 9e0:	82 0f       	add	r24, r18
 9e2:	93 1f       	adc	r25, r19
 9e4:	b8 01       	movw	r22, r16
 9e6:	89 5d       	subi	r24, 0xD9	; 217
 9e8:	98 4f       	sbci	r25, 0xF8	; 248
 9ea:	b4 db       	rcall	.-2200   	; 0x154 <vListInsertEnd>
 9ec:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 9f0:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 9f4:	9e 89       	ldd	r25, Y+22	; 0x16
 9f6:	86 89       	ldd	r24, Z+22	; 0x16
 9f8:	98 17       	cp	r25, r24
 9fa:	08 f4       	brcc	.+2      	; 0x9fe <xTaskIncrementTick+0x10e>
 9fc:	b5 cf       	rjmp	.-150    	; 0x968 <xTaskIncrementTick+0x78>
 9fe:	dc 2c       	mov	r13, r12
 a00:	b3 cf       	rjmp	.-154    	; 0x968 <xTaskIncrementTick+0x78>
 a02:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 a06:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 a0a:	86 89       	ldd	r24, Z+22	; 0x16
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	fc 01       	movw	r30, r24
 a10:	ee 0f       	add	r30, r30
 a12:	ff 1f       	adc	r31, r31
 a14:	ee 0f       	add	r30, r30
 a16:	ff 1f       	adc	r31, r31
 a18:	ee 0f       	add	r30, r30
 a1a:	ff 1f       	adc	r31, r31
 a1c:	8e 0f       	add	r24, r30
 a1e:	9f 1f       	adc	r25, r31
 a20:	fc 01       	movw	r30, r24
 a22:	e9 5d       	subi	r30, 0xD9	; 217
 a24:	f8 4f       	sbci	r31, 0xF8	; 248
 a26:	80 81       	ld	r24, Z
 a28:	82 30       	cpi	r24, 0x02	; 2
 a2a:	48 f0       	brcs	.+18     	; 0xa3e <xTaskIncrementTick+0x14e>
 a2c:	dd 24       	eor	r13, r13
 a2e:	d3 94       	inc	r13
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <xTaskIncrementTick+0x14e>
 a32:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <uxPendedTicks>
 a36:	8f 5f       	subi	r24, 0xFF	; 255
 a38:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <uxPendedTicks>
 a3c:	d1 2c       	mov	r13, r1
 a3e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 a42:	88 23       	and	r24, r24
 a44:	11 f0       	breq	.+4      	; 0xa4a <xTaskIncrementTick+0x15a>
 a46:	dd 24       	eor	r13, r13
 a48:	d3 94       	inc	r13
 a4a:	8d 2d       	mov	r24, r13
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	ff 90       	pop	r15
 a56:	ef 90       	pop	r14
 a58:	df 90       	pop	r13
 a5a:	cf 90       	pop	r12
 a5c:	08 95       	ret

00000a5e <xTaskResumeAll>:
 a5e:	df 92       	push	r13
 a60:	ef 92       	push	r14
 a62:	ff 92       	push	r15
 a64:	0f 93       	push	r16
 a66:	1f 93       	push	r17
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
 a6c:	0f b6       	in	r0, 0x3f	; 63
 a6e:	f8 94       	cli
 a70:	0f 92       	push	r0
 a72:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a76:	81 50       	subi	r24, 0x01	; 1
 a78:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <uxSchedulerSuspended>
 a7c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 a80:	81 11       	cpse	r24, r1
 a82:	59 c0       	rjmp	.+178    	; 0xb36 <xTaskResumeAll+0xd8>
 a84:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <uxCurrentNumberOfTasks>
 a88:	81 11       	cpse	r24, r1
 a8a:	30 c0       	rjmp	.+96     	; 0xaec <xTaskResumeAll+0x8e>
 a8c:	57 c0       	rjmp	.+174    	; 0xb3c <xTaskResumeAll+0xde>
 a8e:	d7 01       	movw	r26, r14
 a90:	15 96       	adiw	r26, 0x05	; 5
 a92:	ed 91       	ld	r30, X+
 a94:	fc 91       	ld	r31, X
 a96:	16 97       	sbiw	r26, 0x06	; 6
 a98:	c6 81       	ldd	r28, Z+6	; 0x06
 a9a:	d7 81       	ldd	r29, Z+7	; 0x07
 a9c:	ce 01       	movw	r24, r28
 a9e:	0c 96       	adiw	r24, 0x0c	; 12
 aa0:	ab db       	rcall	.-2218   	; 0x1f8 <uxListRemove>
 aa2:	8e 01       	movw	r16, r28
 aa4:	0e 5f       	subi	r16, 0xFE	; 254
 aa6:	1f 4f       	sbci	r17, 0xFF	; 255
 aa8:	c8 01       	movw	r24, r16
 aaa:	a6 db       	rcall	.-2228   	; 0x1f8 <uxListRemove>
 aac:	8e 89       	ldd	r24, Y+22	; 0x16
 aae:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 ab2:	98 17       	cp	r25, r24
 ab4:	10 f4       	brcc	.+4      	; 0xaba <xTaskResumeAll+0x5c>
 ab6:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <uxTopReadyPriority>
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	9c 01       	movw	r18, r24
 abe:	22 0f       	add	r18, r18
 ac0:	33 1f       	adc	r19, r19
 ac2:	22 0f       	add	r18, r18
 ac4:	33 1f       	adc	r19, r19
 ac6:	22 0f       	add	r18, r18
 ac8:	33 1f       	adc	r19, r19
 aca:	82 0f       	add	r24, r18
 acc:	93 1f       	adc	r25, r19
 ace:	b8 01       	movw	r22, r16
 ad0:	89 5d       	subi	r24, 0xD9	; 217
 ad2:	98 4f       	sbci	r25, 0xF8	; 248
 ad4:	3f db       	rcall	.-2434   	; 0x154 <vListInsertEnd>
 ad6:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pxCurrentTCB>
 ada:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pxCurrentTCB+0x1>
 ade:	9e 89       	ldd	r25, Y+22	; 0x16
 ae0:	86 89       	ldd	r24, Z+22	; 0x16
 ae2:	98 17       	cp	r25, r24
 ae4:	68 f0       	brcs	.+26     	; 0xb00 <xTaskResumeAll+0xa2>
 ae6:	d0 92 f7 06 	sts	0x06F7, r13	; 0x8006f7 <xYieldPending>
 aea:	0a c0       	rjmp	.+20     	; 0xb00 <xTaskResumeAll+0xa2>
 aec:	c0 e0       	ldi	r28, 0x00	; 0
 aee:	d0 e0       	ldi	r29, 0x00	; 0
 af0:	0f 2e       	mov	r0, r31
 af2:	f8 e0       	ldi	r31, 0x08	; 8
 af4:	ef 2e       	mov	r14, r31
 af6:	f7 e0       	ldi	r31, 0x07	; 7
 af8:	ff 2e       	mov	r15, r31
 afa:	f0 2d       	mov	r31, r0
 afc:	dd 24       	eor	r13, r13
 afe:	d3 94       	inc	r13
 b00:	f7 01       	movw	r30, r14
 b02:	80 81       	ld	r24, Z
 b04:	81 11       	cpse	r24, r1
 b06:	c3 cf       	rjmp	.-122    	; 0xa8e <xTaskResumeAll+0x30>
 b08:	cd 2b       	or	r28, r29
 b0a:	09 f0       	breq	.+2      	; 0xb0e <xTaskResumeAll+0xb0>
 b0c:	32 dd       	rcall	.-1436   	; 0x572 <prvResetNextTaskUnblockTime>
 b0e:	c0 91 f8 06 	lds	r28, 0x06F8	; 0x8006f8 <uxPendedTicks>
 b12:	cc 23       	and	r28, r28
 b14:	49 f0       	breq	.+18     	; 0xb28 <xTaskResumeAll+0xca>
 b16:	d1 e0       	ldi	r29, 0x01	; 1
 b18:	eb de       	rcall	.-554    	; 0x8f0 <xTaskIncrementTick>
 b1a:	81 11       	cpse	r24, r1
 b1c:	d0 93 f7 06 	sts	0x06F7, r29	; 0x8006f7 <xYieldPending>
 b20:	c1 50       	subi	r28, 0x01	; 1
 b22:	d1 f7       	brne	.-12     	; 0xb18 <xTaskResumeAll+0xba>
 b24:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <uxPendedTicks>
 b28:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <xYieldPending>
 b2c:	88 23       	and	r24, r24
 b2e:	29 f0       	breq	.+10     	; 0xb3a <xTaskResumeAll+0xdc>
 b30:	6c dc       	rcall	.-1832   	; 0x40a <vPortYield>
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	03 c0       	rjmp	.+6      	; 0xb3c <xTaskResumeAll+0xde>
 b36:	80 e0       	ldi	r24, 0x00	; 0
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <xTaskResumeAll+0xde>
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	0f 90       	pop	r0
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	1f 91       	pop	r17
 b46:	0f 91       	pop	r16
 b48:	ff 90       	pop	r15
 b4a:	ef 90       	pop	r14
 b4c:	df 90       	pop	r13
 b4e:	08 95       	ret

00000b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	ec 01       	movw	r28, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 b56:	89 2b       	or	r24, r25
 b58:	39 f0       	breq	.+14     	; 0xb68 <vTaskDelay+0x18>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 b5a:	c4 de       	rcall	.-632    	; 0x8e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	ce 01       	movw	r24, r28
			}
			xAlreadyYielded = xTaskResumeAll();
 b60:	5b dd       	rcall	.-1354   	; 0x618 <prvAddCurrentTaskToDelayedList>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 b62:	7d df       	rcall	.-262    	; 0xa5e <xTaskResumeAll>
 b64:	81 11       	cpse	r24, r1
		{
			portYIELD_WITHIN_API();
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <vTaskDelay+0x1a>
 b68:	50 dc       	rcall	.-1888   	; 0x40a <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 b6a:	df 91       	pop	r29
 b6c:	cf 91       	pop	r28
 b6e:	08 95       	ret

00000b70 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 b70:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <uxSchedulerSuspended>
 b74:	88 23       	and	r24, r24
 b76:	21 f0       	breq	.+8      	; 0xb80 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <xYieldPending>
 b7e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
 b80:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <xYieldPending>
		}
		#endif

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 b84:	20 91 fa 06 	lds	r18, 0x06FA	; 0x8006fa <uxTopReadyPriority>
 b88:	82 2f       	mov	r24, r18
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	fc 01       	movw	r30, r24
 b8e:	ee 0f       	add	r30, r30
 b90:	ff 1f       	adc	r31, r31
 b92:	ee 0f       	add	r30, r30
 b94:	ff 1f       	adc	r31, r31
 b96:	ee 0f       	add	r30, r30
 b98:	ff 1f       	adc	r31, r31
 b9a:	e8 0f       	add	r30, r24
 b9c:	f9 1f       	adc	r31, r25
 b9e:	e9 5d       	subi	r30, 0xD9	; 217
 ba0:	f8 4f       	sbci	r31, 0xF8	; 248
 ba2:	30 81       	ld	r19, Z
 ba4:	31 11       	cpse	r19, r1
 ba6:	11 c0       	rjmp	.+34     	; 0xbca <vTaskSwitchContext+0x5a>
 ba8:	21 50       	subi	r18, 0x01	; 1
 baa:	82 2f       	mov	r24, r18
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	fc 01       	movw	r30, r24
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	ee 0f       	add	r30, r30
 bb6:	ff 1f       	adc	r31, r31
 bb8:	ee 0f       	add	r30, r30
 bba:	ff 1f       	adc	r31, r31
 bbc:	e8 0f       	add	r30, r24
 bbe:	f9 1f       	adc	r31, r25
 bc0:	e9 5d       	subi	r30, 0xD9	; 217
 bc2:	f8 4f       	sbci	r31, 0xF8	; 248
 bc4:	30 81       	ld	r19, Z
 bc6:	33 23       	and	r19, r19
 bc8:	79 f3       	breq	.-34     	; 0xba8 <vTaskSwitchContext+0x38>
 bca:	ac 01       	movw	r20, r24
 bcc:	44 0f       	add	r20, r20
 bce:	55 1f       	adc	r21, r21
 bd0:	44 0f       	add	r20, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	44 0f       	add	r20, r20
 bd6:	55 1f       	adc	r21, r21
 bd8:	48 0f       	add	r20, r24
 bda:	59 1f       	adc	r21, r25
 bdc:	da 01       	movw	r26, r20
 bde:	a9 5d       	subi	r26, 0xD9	; 217
 be0:	b8 4f       	sbci	r27, 0xF8	; 248
 be2:	11 96       	adiw	r26, 0x01	; 1
 be4:	ed 91       	ld	r30, X+
 be6:	fc 91       	ld	r31, X
 be8:	12 97       	sbiw	r26, 0x02	; 2
 bea:	02 80       	ldd	r0, Z+2	; 0x02
 bec:	f3 81       	ldd	r31, Z+3	; 0x03
 bee:	e0 2d       	mov	r30, r0
 bf0:	12 96       	adiw	r26, 0x02	; 2
 bf2:	fc 93       	st	X, r31
 bf4:	ee 93       	st	-X, r30
 bf6:	11 97       	sbiw	r26, 0x01	; 1
 bf8:	46 5d       	subi	r20, 0xD6	; 214
 bfa:	58 4f       	sbci	r21, 0xF8	; 248
 bfc:	e4 17       	cp	r30, r20
 bfe:	f5 07       	cpc	r31, r21
 c00:	29 f4       	brne	.+10     	; 0xc0c <vTaskSwitchContext+0x9c>
 c02:	42 81       	ldd	r20, Z+2	; 0x02
 c04:	53 81       	ldd	r21, Z+3	; 0x03
 c06:	fd 01       	movw	r30, r26
 c08:	52 83       	std	Z+2, r21	; 0x02
 c0a:	41 83       	std	Z+1, r20	; 0x01
 c0c:	fc 01       	movw	r30, r24
 c0e:	ee 0f       	add	r30, r30
 c10:	ff 1f       	adc	r31, r31
 c12:	ee 0f       	add	r30, r30
 c14:	ff 1f       	adc	r31, r31
 c16:	ee 0f       	add	r30, r30
 c18:	ff 1f       	adc	r31, r31
 c1a:	8e 0f       	add	r24, r30
 c1c:	9f 1f       	adc	r25, r31
 c1e:	fc 01       	movw	r30, r24
 c20:	e9 5d       	subi	r30, 0xD9	; 217
 c22:	f8 4f       	sbci	r31, 0xF8	; 248
 c24:	01 80       	ldd	r0, Z+1	; 0x01
 c26:	f2 81       	ldd	r31, Z+2	; 0x02
 c28:	e0 2d       	mov	r30, r0
 c2a:	86 81       	ldd	r24, Z+6	; 0x06
 c2c:	97 81       	ldd	r25, Z+7	; 0x07
 c2e:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pxCurrentTCB+0x1>
 c32:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pxCurrentTCB>
 c36:	20 93 fa 06 	sts	0x06FA, r18	; 0x8006fa <uxTopReadyPriority>
 c3a:	08 95       	ret

00000c3c <_exit>:
 c3c:	f8 94       	cli

00000c3e <__stop_program>:
 c3e:	ff cf       	rjmp	.-2      	; 0xc3e <__stop_program>
